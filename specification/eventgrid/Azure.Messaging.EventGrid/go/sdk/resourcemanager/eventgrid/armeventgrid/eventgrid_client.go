// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armeventgrid

import (
	"context"
	"errors"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// EventGridClient - Azure Messaging EventGrid Client
// Don't use this type directly, use a constructor function instead.
type EventGridClient struct {
	internal *azcore.Client
	endpoint string
}

// AcknowledgeCloudEvents - Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if the request
// is successfully accepted. The response body will include the set of successfully acknowledged lockTokens, along with other
// failed lockTokens with their corresponding error information. Successfully acknowledged events will no longer be available
// to any consumer.
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - acknowledgeOptions - AcknowledgeOptions.
//   - options - EventGridClientAcknowledgeCloudEventsOptions contains the optional parameters for the EventGridClient.AcknowledgeCloudEvents
//     method.
func (client *EventGridClient) AcknowledgeCloudEvents(ctx context.Context, topicName string, eventSubscriptionName string, acknowledgeOptions AcknowledgeOptions, options *EventGridClientAcknowledgeCloudEventsOptions) (EventGridClientAcknowledgeCloudEventsResponse, error) {
	var err error
	req, err := client.acknowledgeCloudEventsCreateRequest(ctx, topicName, eventSubscriptionName, acknowledgeOptions, options)
	if err != nil {
		return EventGridClientAcknowledgeCloudEventsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EventGridClientAcknowledgeCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EventGridClientAcknowledgeCloudEventsResponse{}, err
	}
	resp, err := client.acknowledgeCloudEventsHandleResponse(httpResp)
	return resp, err
}

// acknowledgeCloudEventsCreateRequest creates the AcknowledgeCloudEvents request.
func (client *EventGridClient) acknowledgeCloudEventsCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, acknowledgeOptions AcknowledgeOptions, options *EventGridClientAcknowledgeCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:acknowledge"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, acknowledgeOptions); err != nil {
	return nil, err
}
	return req, nil
}

// acknowledgeCloudEventsHandleResponse handles the AcknowledgeCloudEvents response.
func (client *EventGridClient) acknowledgeCloudEventsHandleResponse(resp *http.Response) (EventGridClientAcknowledgeCloudEventsResponse, error) {
	result := EventGridClientAcknowledgeCloudEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AcknowledgeResult); err != nil {
		return EventGridClientAcknowledgeCloudEventsResponse{}, err
	}
	return result, nil
}

// PublishCloudEvent - Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP
// 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
// 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates
// that specific topic is not found, 400: for bad request, and 500: for internal server error.
//   - topicName - Topic Name.
//   - event - Single Cloud Event being published.
//   - options - EventGridClientPublishCloudEventOptions contains the optional parameters for the EventGridClient.PublishCloudEvent
//     method.
func (client *EventGridClient) PublishCloudEvent(ctx context.Context, topicName string, event CloudEvent, options *EventGridClientPublishCloudEventOptions) (EventGridClientPublishCloudEventResponse, error) {
	var err error
	req, err := client.publishCloudEventCreateRequest(ctx, topicName, event, options)
	if err != nil {
		return EventGridClientPublishCloudEventResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EventGridClientPublishCloudEventResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EventGridClientPublishCloudEventResponse{}, err
	}
	resp, err := client.publishCloudEventHandleResponse(httpResp)
	return resp, err
}

// publishCloudEventCreateRequest creates the PublishCloudEvent request.
func (client *EventGridClient) publishCloudEventCreateRequest(ctx context.Context, topicName string, event CloudEvent, options *EventGridClientPublishCloudEventOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}:publish"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/cloudevents+json; charset=utf-8"}
	if err := runtime.MarshalAsJSON(req, event); err != nil {
	return nil, err
}
	return req, nil
}

// publishCloudEventHandleResponse handles the PublishCloudEvent response.
func (client *EventGridClient) publishCloudEventHandleResponse(resp *http.Response) (EventGridClientPublishCloudEventResponse, error) {
	result := EventGridClientPublishCloudEventResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PublishResult); err != nil {
		return EventGridClientPublishCloudEventResponse{}, err
	}
	return result, nil
}

// PublishCloudEvents - Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP
// 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
// 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates
// that specific topic is not found, 400: for bad request, and 500: for internal server error.
//   - topicName - Topic Name.
//   - events - Array of Cloud Events being published.
//   - options - EventGridClientPublishCloudEventsOptions contains the optional parameters for the EventGridClient.PublishCloudEvents
//     method.
func (client *EventGridClient) PublishCloudEvents(ctx context.Context, topicName string, events []*CloudEvent, options *EventGridClientPublishCloudEventsOptions) (EventGridClientPublishCloudEventsResponse, error) {
	var err error
	req, err := client.publishCloudEventsCreateRequest(ctx, topicName, events, options)
	if err != nil {
		return EventGridClientPublishCloudEventsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EventGridClientPublishCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EventGridClientPublishCloudEventsResponse{}, err
	}
	resp, err := client.publishCloudEventsHandleResponse(httpResp)
	return resp, err
}

// publishCloudEventsCreateRequest creates the PublishCloudEvents request.
func (client *EventGridClient) publishCloudEventsCreateRequest(ctx context.Context, topicName string, events []*CloudEvent, options *EventGridClientPublishCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}:publish"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/cloudevents-batch+json; charset=utf-8"}
	if err := runtime.MarshalAsJSON(req, events); err != nil {
	return nil, err
}
	return req, nil
}

// publishCloudEventsHandleResponse handles the PublishCloudEvents response.
func (client *EventGridClient) publishCloudEventsHandleResponse(resp *http.Response) (EventGridClientPublishCloudEventsResponse, error) {
	result := EventGridClientPublishCloudEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PublishResult); err != nil {
		return EventGridClientPublishCloudEventsResponse{}, err
	}
	return result, nil
}

// ReceiveCloudEvents - Receive Batch of Cloud Events from the Event Subscription.
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - options - EventGridClientReceiveCloudEventsOptions contains the optional parameters for the EventGridClient.ReceiveCloudEvents
//     method.
func (client *EventGridClient) ReceiveCloudEvents(ctx context.Context, topicName string, eventSubscriptionName string, options *EventGridClientReceiveCloudEventsOptions) (EventGridClientReceiveCloudEventsResponse, error) {
	var err error
	req, err := client.receiveCloudEventsCreateRequest(ctx, topicName, eventSubscriptionName, options)
	if err != nil {
		return EventGridClientReceiveCloudEventsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EventGridClientReceiveCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EventGridClientReceiveCloudEventsResponse{}, err
	}
	resp, err := client.receiveCloudEventsHandleResponse(httpResp)
	return resp, err
}

// receiveCloudEventsCreateRequest creates the ReceiveCloudEvents request.
func (client *EventGridClient) receiveCloudEventsCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, options *EventGridClientReceiveCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:receive"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	if options != nil && options.MaxEvents != nil {
		reqQP.Set("maxEvents", strconv.FormatInt(int64(*options.MaxEvents), 10))
	}
	if options != nil && options.MaxWaitTime != nil {
		reqQP.Set("maxWaitTime", strconv.FormatInt(int64(*options.MaxWaitTime), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// receiveCloudEventsHandleResponse handles the ReceiveCloudEvents response.
func (client *EventGridClient) receiveCloudEventsHandleResponse(resp *http.Response) (EventGridClientReceiveCloudEventsResponse, error) {
	result := EventGridClientReceiveCloudEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ReceiveResult); err != nil {
		return EventGridClientReceiveCloudEventsResponse{}, err
	}
	return result, nil
}

// RejectCloudEvents - Reject batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
// accepted. The response body will include the set of successfully rejected lockTokens, along with other failed lockTokens
// with their corresponding error information.
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - rejectOptions - RejectOptions
//   - options - EventGridClientRejectCloudEventsOptions contains the optional parameters for the EventGridClient.RejectCloudEvents
//     method.
func (client *EventGridClient) RejectCloudEvents(ctx context.Context, topicName string, eventSubscriptionName string, rejectOptions RejectOptions, options *EventGridClientRejectCloudEventsOptions) (EventGridClientRejectCloudEventsResponse, error) {
	var err error
	req, err := client.rejectCloudEventsCreateRequest(ctx, topicName, eventSubscriptionName, rejectOptions, options)
	if err != nil {
		return EventGridClientRejectCloudEventsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EventGridClientRejectCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EventGridClientRejectCloudEventsResponse{}, err
	}
	resp, err := client.rejectCloudEventsHandleResponse(httpResp)
	return resp, err
}

// rejectCloudEventsCreateRequest creates the RejectCloudEvents request.
func (client *EventGridClient) rejectCloudEventsCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, rejectOptions RejectOptions, options *EventGridClientRejectCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:reject"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, rejectOptions); err != nil {
	return nil, err
}
	return req, nil
}

// rejectCloudEventsHandleResponse handles the RejectCloudEvents response.
func (client *EventGridClient) rejectCloudEventsHandleResponse(resp *http.Response) (EventGridClientRejectCloudEventsResponse, error) {
	result := EventGridClientRejectCloudEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RejectResult); err != nil {
		return EventGridClientRejectCloudEventsResponse{}, err
	}
	return result, nil
}

// ReleaseCloudEvents - Release batch of Cloud Events. The server responds with an HTTP 200 status code if the request is
// successfully accepted. The response body will include the set of successfully released lockTokens, along with other failed
// lockTokens with their corresponding error information.
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - releaseOptions - ReleaseOptions
//   - options - EventGridClientReleaseCloudEventsOptions contains the optional parameters for the EventGridClient.ReleaseCloudEvents
//     method.
func (client *EventGridClient) ReleaseCloudEvents(ctx context.Context, topicName string, eventSubscriptionName string, releaseOptions ReleaseOptions, options *EventGridClientReleaseCloudEventsOptions) (EventGridClientReleaseCloudEventsResponse, error) {
	var err error
	req, err := client.releaseCloudEventsCreateRequest(ctx, topicName, eventSubscriptionName, releaseOptions, options)
	if err != nil {
		return EventGridClientReleaseCloudEventsResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EventGridClientReleaseCloudEventsResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EventGridClientReleaseCloudEventsResponse{}, err
	}
	resp, err := client.releaseCloudEventsHandleResponse(httpResp)
	return resp, err
}

// releaseCloudEventsCreateRequest creates the ReleaseCloudEvents request.
func (client *EventGridClient) releaseCloudEventsCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, releaseOptions ReleaseOptions, options *EventGridClientReleaseCloudEventsOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:release"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	if options != nil && options.ReleaseDelayInSeconds != nil {
		reqQP.Set("releaseDelayInSeconds", fmt.Sprintf("%v", *options.ReleaseDelayInSeconds))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, releaseOptions); err != nil {
	return nil, err
}
	return req, nil
}

// releaseCloudEventsHandleResponse handles the ReleaseCloudEvents response.
func (client *EventGridClient) releaseCloudEventsHandleResponse(resp *http.Response) (EventGridClientReleaseCloudEventsResponse, error) {
	result := EventGridClientReleaseCloudEventsResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.ReleaseResult); err != nil {
		return EventGridClientReleaseCloudEventsResponse{}, err
	}
	return result, nil
}

// RenewCloudEventLocks - Renew lock for batch of Cloud Events. The server responds with an HTTP 200 status code if the request
// is successfully accepted. The response body will include the set of successfully renewed lockTokens, along with other failed
// lockTokens with their corresponding error information.
//   - topicName - Topic Name.
//   - eventSubscriptionName - Event Subscription Name.
//   - renewLockOptions - RenewLockOptions
//   - options - EventGridClientRenewCloudEventLocksOptions contains the optional parameters for the EventGridClient.RenewCloudEventLocks
//     method.
func (client *EventGridClient) RenewCloudEventLocks(ctx context.Context, topicName string, eventSubscriptionName string, renewLockOptions RenewLockOptions, options *EventGridClientRenewCloudEventLocksOptions) (EventGridClientRenewCloudEventLocksResponse, error) {
	var err error
	req, err := client.renewCloudEventLocksCreateRequest(ctx, topicName, eventSubscriptionName, renewLockOptions, options)
	if err != nil {
		return EventGridClientRenewCloudEventLocksResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return EventGridClientRenewCloudEventLocksResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return EventGridClientRenewCloudEventLocksResponse{}, err
	}
	resp, err := client.renewCloudEventLocksHandleResponse(httpResp)
	return resp, err
}

// renewCloudEventLocksCreateRequest creates the RenewCloudEventLocks request.
func (client *EventGridClient) renewCloudEventLocksCreateRequest(ctx context.Context, topicName string, eventSubscriptionName string, renewLockOptions RenewLockOptions, options *EventGridClientRenewCloudEventLocksOptions) (*policy.Request, error) {
	host := "{endpoint}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:renewLock"
	if topicName == "" {
		return nil, errors.New("parameter topicName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{topicName}", url.PathEscape(topicName))
	if eventSubscriptionName == "" {
		return nil, errors.New("parameter eventSubscriptionName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{eventSubscriptionName}", url.PathEscape(eventSubscriptionName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2023-10-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, renewLockOptions); err != nil {
	return nil, err
}
	return req, nil
}

// renewCloudEventLocksHandleResponse handles the RenewCloudEventLocks response.
func (client *EventGridClient) renewCloudEventLocksHandleResponse(resp *http.Response) (EventGridClientRenewCloudEventLocksResponse, error) {
	result := EventGridClientRenewCloudEventLocksResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.RenewCloudEventLocksResult); err != nil {
		return EventGridClientRenewCloudEventLocksResponse{}, err
	}
	return result, nil
}

