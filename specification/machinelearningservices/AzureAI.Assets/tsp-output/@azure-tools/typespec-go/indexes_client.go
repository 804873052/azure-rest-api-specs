// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package typespec-go

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// IndexesClient contains the methods for the Microsoft.MachineLearningServices namespace.
// Don't use this type directly, use [MachineLearningServicesClient.NewIndexesClient] instead.
type IndexesClient struct {
	internal *azcore.Client
	endpoint string
	subscriptionId string
	resourceGroupName string
	workspaceName string
}

// CreateOrUpdate - Creates or updates a IndexVersion.
//   - name - Name of the index.
//   - version - Version of the index.
//   - body - Properties of an Index Version.
//   - options - IndexesClientCreateOrUpdateOptions contains the optional parameters for the IndexesClient.CreateOrUpdate method.
func (client *IndexesClient) CreateOrUpdate(ctx context.Context, name string, version string, body Index, options *IndexesClientCreateOrUpdateOptions) (IndexesClientCreateOrUpdateResponse, error) {
	var err error
	req, err := client.createOrUpdateCreateRequest(ctx, name, version, body, options)
	if err != nil {
		return IndexesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *IndexesClient) createOrUpdateCreateRequest(ctx context.Context, name string, version string, body Index, options *IndexesClientCreateOrUpdateOptions) (*policy.Request, error) {
	host := "{endpoint}/genericasset/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{subscriptionId}", client.subscriptionId)
	host = strings.ReplaceAll(host, "{resourceGroupName}", client.resourceGroupName)
	host = strings.ReplaceAll(host, "{workspaceName}", client.workspaceName)
	urlPath := "/indexes/{name}/versions/{version}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if version == "" {
		return nil, errors.New("parameter version cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{version}", url.PathEscape(version))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
	return nil, err
}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *IndexesClient) createOrUpdateHandleResponse(resp *http.Response) (IndexesClientCreateOrUpdateResponse, error) {
	result := IndexesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Index); err != nil {
		return IndexesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Get - Fetch a IndexVersion by name.
//   - name - Name of the index.
//   - version - Version of the index.
//   - options - IndexesClientGetOptions contains the optional parameters for the IndexesClient.Get method.
func (client *IndexesClient) Get(ctx context.Context, name string, version string, options *IndexesClientGetOptions) (IndexesClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, name, version, options)
	if err != nil {
		return IndexesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *IndexesClient) getCreateRequest(ctx context.Context, name string, version string, options *IndexesClientGetOptions) (*policy.Request, error) {
	host := "{endpoint}/genericasset/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{subscriptionId}", client.subscriptionId)
	host = strings.ReplaceAll(host, "{resourceGroupName}", client.resourceGroupName)
	host = strings.ReplaceAll(host, "{workspaceName}", client.workspaceName)
	urlPath := "/indexes/{name}/versions/{version}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	if version == "" {
		return nil, errors.New("parameter version cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{version}", url.PathEscape(version))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *IndexesClient) getHandleResponse(resp *http.Response) (IndexesClientGetResponse, error) {
	result := IndexesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Index); err != nil {
		return IndexesClientGetResponse{}, err
	}
	return result, nil
}

// GetLatest - Get latest Index.
//   - name - Name of the index.
//   - options - IndexesClientGetLatestOptions contains the optional parameters for the IndexesClient.GetLatest method.
func (client *IndexesClient) GetLatest(ctx context.Context, name string, options *IndexesClientGetLatestOptions) (IndexesClientGetLatestResponse, error) {
	var err error
	req, err := client.getLatestCreateRequest(ctx, name, options)
	if err != nil {
		return IndexesClientGetLatestResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientGetLatestResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientGetLatestResponse{}, err
	}
	resp, err := client.getLatestHandleResponse(httpResp)
	return resp, err
}

// getLatestCreateRequest creates the GetLatest request.
func (client *IndexesClient) getLatestCreateRequest(ctx context.Context, name string, options *IndexesClientGetLatestOptions) (*policy.Request, error) {
	host := "{endpoint}/genericasset/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{subscriptionId}", client.subscriptionId)
	host = strings.ReplaceAll(host, "{resourceGroupName}", client.resourceGroupName)
	host = strings.ReplaceAll(host, "{workspaceName}", client.workspaceName)
	urlPath := "/indexes/{name}"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getLatestHandleResponse handles the GetLatest response.
func (client *IndexesClient) getLatestHandleResponse(resp *http.Response) (IndexesClientGetLatestResponse, error) {
	result := IndexesClientGetLatestResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Index); err != nil {
		return IndexesClientGetLatestResponse{}, err
	}
	return result, nil
}

// GetNextVersion - Get next Index version.
//   - name - Name of the index.
//   - options - IndexesClientGetNextVersionOptions contains the optional parameters for the IndexesClient.GetNextVersion method.
func (client *IndexesClient) GetNextVersion(ctx context.Context, name string, options *IndexesClientGetNextVersionOptions) (IndexesClientGetNextVersionResponse, error) {
	var err error
	req, err := client.getNextVersionCreateRequest(ctx, name, options)
	if err != nil {
		return IndexesClientGetNextVersionResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return IndexesClientGetNextVersionResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return IndexesClientGetNextVersionResponse{}, err
	}
	resp, err := client.getNextVersionHandleResponse(httpResp)
	return resp, err
}

// getNextVersionCreateRequest creates the GetNextVersion request.
func (client *IndexesClient) getNextVersionCreateRequest(ctx context.Context, name string, options *IndexesClientGetNextVersionOptions) (*policy.Request, error) {
	host := "{endpoint}/genericasset/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{subscriptionId}", client.subscriptionId)
	host = strings.ReplaceAll(host, "{resourceGroupName}", client.resourceGroupName)
	host = strings.ReplaceAll(host, "{workspaceName}", client.workspaceName)
	urlPath := "/indexes/{name}:getNextVersion"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getNextVersionHandleResponse handles the GetNextVersion response.
func (client *IndexesClient) getNextVersionHandleResponse(resp *http.Response) (IndexesClientGetNextVersionResponse, error) {
	result := IndexesClientGetNextVersionResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.VersionInfo); err != nil {
		return IndexesClientGetNextVersionResponse{}, err
	}
	return result, nil
}

// NewListPager - The most basic operation.
//   - name - Name of the index.
//   - listViewType - View type for including/excluding (for example) archived entities.
//   - options - IndexesClientListOptions contains the optional parameters for the IndexesClient.NewListPager method.
func (client *IndexesClient) NewListPager(name string, listViewType string, options *IndexesClientListOptions) (*runtime.Pager[IndexesClientListResponse]) {
	return runtime.NewPager(runtime.PagingHandler[IndexesClientListResponse]{
		More: func(page IndexesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *IndexesClientListResponse) (IndexesClientListResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, name, listViewType, options)
			}, nil)
			if err != nil {
				return IndexesClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
			},
	})
}

// listCreateRequest creates the List request.
func (client *IndexesClient) listCreateRequest(ctx context.Context, name string, listViewType string, options *IndexesClientListOptions) (*policy.Request, error) {
	host := "{endpoint}/genericasset/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{subscriptionId}", client.subscriptionId)
	host = strings.ReplaceAll(host, "{resourceGroupName}", client.resourceGroupName)
	host = strings.ReplaceAll(host, "{workspaceName}", client.workspaceName)
	urlPath := "/indexes/{name}/versions"
	if name == "" {
		return nil, errors.New("parameter name cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{name}", url.PathEscape(name))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	reqQP.Set("listViewType", listViewType)
	if options != nil && options.Maxpagesize != nil {
		reqQP.Set("maxpagesize", strconv.FormatInt(int64(*options.Maxpagesize), 10))
	}
	if options != nil && options.OrderBy != nil {
		reqQP.Set("orderBy", *options.OrderBy)
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Tags != nil {
		reqQP.Set("tags", *options.Tags)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *IndexesClient) listHandleResponse(resp *http.Response) (IndexesClientListResponse, error) {
	result := IndexesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedIndex); err != nil {
		return IndexesClientListResponse{}, err
	}
	return result, nil
}

// NewListLatestPager - List the latest version of each index.
//   - options - IndexesClientListLatestOptions contains the optional parameters for the IndexesClient.NewListLatestPager method.
func (client *IndexesClient) NewListLatestPager(options *IndexesClientListLatestOptions) (*runtime.Pager[IndexesClientListLatestResponse]) {
	return runtime.NewPager(runtime.PagingHandler[IndexesClientListLatestResponse]{
		More: func(page IndexesClientListLatestResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *IndexesClientListLatestResponse) (IndexesClientListLatestResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listLatestCreateRequest(ctx, options)
			}, nil)
			if err != nil {
				return IndexesClientListLatestResponse{}, err
			}
			return client.listLatestHandleResponse(resp)
			},
	})
}

// listLatestCreateRequest creates the ListLatest request.
func (client *IndexesClient) listLatestCreateRequest(ctx context.Context, options *IndexesClientListLatestOptions) (*policy.Request, error) {
	host := "{endpoint}/genericasset/v2.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	host = strings.ReplaceAll(host, "{subscriptionId}", client.subscriptionId)
	host = strings.ReplaceAll(host, "{resourceGroupName}", client.resourceGroupName)
	host = strings.ReplaceAll(host, "{workspaceName}", client.workspaceName)
	urlPath := "/indexes"
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-04-01-preview")
	if options != nil && options.Maxpagesize != nil {
		reqQP.Set("maxpagesize", strconv.FormatInt(int64(*options.Maxpagesize), 10))
	}
	if options != nil && options.Skip != nil {
		reqQP.Set("skip", strconv.FormatInt(int64(*options.Skip), 10))
	}
	if options != nil && options.Top != nil {
		reqQP.Set("top", strconv.FormatInt(int64(*options.Top), 10))
	}
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listLatestHandleResponse handles the ListLatest response.
func (client *IndexesClient) listLatestHandleResponse(resp *http.Response) (IndexesClientListLatestResponse, error) {
	result := IndexesClientListLatestResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedIndex); err != nil {
		return IndexesClientListLatestResponse{}, err
	}
	return result, nil
}

