// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package typespec-go

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
)

// NetworkAnalyticsClient contains the methods for the Microsoft.NetworkAnalytics namespace.
// Don't use this type directly, use NewNetworkAnalyticsClient() instead.
type NetworkAnalyticsClient struct {
	internal *arm.Client
}

// NewNetworkAnalyticsClient creates a new instance of NetworkAnalyticsClient with the specified values.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewNetworkAnalyticsClient(credential azcore.TokenCredential, options *arm.ClientOptions) (*NetworkAnalyticsClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &NetworkAnalyticsClient{
	internal: cl,
	}
	return client, nil
}

// NewDataProductsCatalogsClient creates a new instance of [DataProductsCatalogsClient].
func (client *NetworkAnalyticsClient) NewDataProductsCatalogsClient() *DataProductsCatalogsClient {
	return &DataProductsCatalogsClient{
		internal: client.internal,
	}
}

// NewDataProductsClient creates a new instance of [DataProductsClient].
func (client *NetworkAnalyticsClient) NewDataProductsClient() *DataProductsClient {
	return &DataProductsClient{
		internal: client.internal,
	}
}

// NewDataTypesClient creates a new instance of [DataTypesClient].
func (client *NetworkAnalyticsClient) NewDataTypesClient() *DataTypesClient {
	return &DataTypesClient{
		internal: client.internal,
	}
}

// NewOperationsClient creates a new instance of [OperationsClient].
func (client *NetworkAnalyticsClient) NewOperationsClient() *OperationsClient {
	return &OperationsClient{
		internal: client.internal,
	}
}

