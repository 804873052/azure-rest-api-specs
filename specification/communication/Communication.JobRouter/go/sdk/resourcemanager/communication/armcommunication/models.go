// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcommunication

import (
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"time"
)

// Response containing ids for the worker, job, and assignment from an accepted offer.
type AcceptJobOfferResult struct {
	// REQUIRED; Id of job assignment that assigns a worker that has accepted an offer to a job.
	AssignmentID *string

	// REQUIRED; Id of the job assigned.
	JobID *string

	// REQUIRED; Id of the worker that has been assigned this job.
	WorkerID *string
}

// Jobs are distributed to the worker with the strongest abilities available.
type BestWorkerMode struct {
	// CONSTANT; The type discriminator describing a sub-type of Mode
// Field has constant value DistributionModeKindBestWorker, any specified value is ignored.
	Kind *DistributionModeKind

	// If set to true, then router will match workers to jobs even if they don't match label selectors. Warning: You may get workers
// that are not qualified for a job they are matched with if you set this variable to true. This flag is intended more for
// temporary usage. By default, set to false.
	BypassSelectors *bool

	// Governs the maximum number of active concurrent offers a job can have.
	MaxConcurrentOffers *int32

	// Governs the minimum desired number of active concurrent offers a job can have.
	MinConcurrentOffers *int32

	// Define a scoring rule to use, when calculating a score to determine the best worker. If not set, will use a default scoring
// formula that uses the number of job labels that the worker labels match, as well as the number of label selectors the worker
// labels match and/or exceed using a logistic function (https://en.wikipedia.org/wiki/Logistic_function).
	ScoringRule RouterRuleClassification

	// Options to configure 'scoringRule'. If not set, default values are used.
	ScoringRuleOptions *ScoringRuleOptions
}

// GetDistributionMode implements the DistributionModeClassification interface for type BestWorkerMode.
func (b *BestWorkerMode) GetDistributionMode() *DistributionMode {
	return &DistributionMode{
		BypassSelectors: b.BypassSelectors,
		Kind: b.Kind,
		MaxConcurrentOffers: b.MaxConcurrentOffers,
		MinConcurrentOffers: b.MinConcurrentOffers,
	}
}

// An action that marks a job as cancelled.
type CancelExceptionAction struct {
	// CONSTANT; The type discriminator describing a sub-type of ExceptionAction.
// Field has constant value ExceptionActionKindCancel, any specified value is ignored.
	Kind *ExceptionActionKind

	// Indicates the outcome of a job, populate this field with your own custom values.
	DispositionCode *string

	// Unique Id of the exception action.
	ID *string

	// A note that will be appended to a job's notes collection with the current timestamp.
	Note *string
}

// GetExceptionAction implements the ExceptionActionClassification interface for type CancelExceptionAction.
func (c *CancelExceptionAction) GetExceptionAction() *ExceptionAction {
	return &ExceptionAction{
		ID: c.ID,
		Kind: c.Kind,
	}
}

// Request payload for cancelling a job.
type CancelJobOptions struct {
	// Indicates the outcome of a job, populate this field with your own custom values. If not provided, default value of "Cancelled"
// is set.
	DispositionCode *string

	// A note that will be appended to a job's Notes collection with the current timestamp.
	Note *string
}

// A container for the rules that govern how jobs are classified.
type ClassificationPolicy struct {
	// REQUIRED; The entity tag for this resource.
	Etag *azcore.ETag

	// REQUIRED; Id of a classification policy.
	ID *string

	// Id of a fallback queue to select if queue selector attachments doesn't find a match.
	FallbackQueueID *string

	// Friendly name of this policy.
	Name *string

	// A rule to determine a priority score for a job.
	PrioritizationRule RouterRuleClassification

	// Queue selector attachments used to resolve a queue for a job.
	QueueSelectorAttachments []QueueSelectorAttachmentClassification

	// Worker selector attachments used to attach worker selectors to a job.
	WorkerSelectorAttachments []WorkerSelectorAttachmentClassification
}

// Request payload for closing jobs
type CloseJobOptions struct {
	// If not provided, worker capacity is released immediately along with a JobClosedEvent notification. If provided, worker
// capacity is released along with a JobClosedEvent notification at a future time in UTC.
	CloseAt *time.Time

	// Indicates the outcome of a job, populate this field with your own custom values.
	DispositionCode *string

	// A note that will be appended to a job's Notes collection with the current timestamp.
	Note *string
}

// Request payload for completing jobs.
type CompleteJobOptions struct {
	// A note that will be appended to a job's Notes collection with the current timestamp.
	Note *string
}

// Describes a set of queue selectors that will be attached if the given condition resolves to true.
type ConditionalQueueSelectorAttachment struct {
	// REQUIRED; The condition that must be true for the queue selectors to be attached.
	Condition RouterRuleClassification

	// CONSTANT; The type discriminator describing the type of queue selector attachment.
// Field has constant value QueueSelectorAttachmentKindConditional, any specified value is ignored.
	Kind *QueueSelectorAttachmentKind

	// REQUIRED; The queue selectors to attach.
	QueueSelectors []*RouterQueueSelector
}

// GetQueueSelectorAttachment implements the QueueSelectorAttachmentClassification interface for type ConditionalQueueSelectorAttachment.
func (c *ConditionalQueueSelectorAttachment) GetQueueSelectorAttachment() *QueueSelectorAttachment {
	return &QueueSelectorAttachment{
		Kind: c.Kind,
	}
}

// Describes a set of worker selectors that will be attached if the given condition resolves to true.
type ConditionalWorkerSelectorAttachment struct {
	// REQUIRED; The condition that must be true for the worker selectors to be attached.
	Condition RouterRuleClassification

	// CONSTANT; The type discriminator describing the type of worker selector attachment.
// Field has constant value WorkerSelectorAttachmentKindConditional, any specified value is ignored.
	Kind *WorkerSelectorAttachmentKind

	// REQUIRED; The worker selectors to attach.
	WorkerSelectors []*RouterWorkerSelector
}

// GetWorkerSelectorAttachment implements the WorkerSelectorAttachmentClassification interface for type ConditionalWorkerSelectorAttachment.
func (c *ConditionalWorkerSelectorAttachment) GetWorkerSelectorAttachment() *WorkerSelectorAttachment {
	return &WorkerSelectorAttachment{
		Kind: c.Kind,
	}
}

// Request payload for declining offers.
type DeclineJobOfferOptions struct {
	// If the RetryOfferAt is not provided, then this job will not be offered again to the worker who declined this job unless
// the worker is de-registered and re-registered. If a RetryOfferAt time is provided, then the job will be re-matched to eligible
// workers at the retry time in UTC. The worker that declined the job will also be eligible for the job at that time.
	RetryOfferAt *time.Time
}

// A rule that return the same labels as the input labels.
type DirectMapRouterRule struct {
	// CONSTANT; The type discriminator describing a sub-type of Rule.
// Field has constant value RouterRuleKindDirectMap, any specified value is ignored.
	Kind *RouterRuleKind
}

// GetRouterRule implements the RouterRuleClassification interface for type DirectMapRouterRule.
func (d *DirectMapRouterRule) GetRouterRule() *RouterRule {
	return &RouterRule{
		Kind: d.Kind,
	}
}

// Abstract base class for defining a distribution mode.
type DistributionMode struct {
	// REQUIRED; The type discriminator describing a sub-type of DistributionMode.
	Kind *DistributionModeKind

	// If set to true, then router will match workers to jobs even if they don't match label selectors. Warning: You may get workers
// that are not qualified for a job they are matched with if you set this variable to true. This flag is intended more for
// temporary usage. By default, set to false.
	BypassSelectors *bool

	// Governs the maximum number of active concurrent offers a job can have.
	MaxConcurrentOffers *int32

	// Governs the minimum desired number of active concurrent offers a job can have.
	MinConcurrentOffers *int32
}

// GetDistributionMode implements the DistributionModeClassification interface for type DistributionMode.
func (d *DistributionMode) GetDistributionMode() *DistributionMode { return d }

// Policy governing how jobs are distributed to workers
type DistributionPolicy struct {
	// REQUIRED; The entity tag for this resource.
	Etag *azcore.ETag

	// REQUIRED; Id of a distribution policy.
	ID *string

	// Mode governing the specific distribution method.
	Mode DistributionModeClassification

	// Friendly name of this policy.
	Name *string

	// Number of seconds after which any offers created under this policy will be expired.
	OfferExpiresAfterSeconds *float64
}

// The action to take when the exception is triggered.
type ExceptionAction struct {
	// REQUIRED; The type discriminator describing a sub-type of ExceptionAction.
	Kind *ExceptionActionKind

	// Unique Id of the exception action.
	ID *string
}

// GetExceptionAction implements the ExceptionActionClassification interface for type ExceptionAction.
func (e *ExceptionAction) GetExceptionAction() *ExceptionAction { return e }

// A policy that defines actions to execute when exception are triggered.
type ExceptionPolicy struct {
	// REQUIRED; The entity tag for this resource.
	Etag *azcore.ETag

	// REQUIRED; Id of an exception policy.
	ID *string

	// A collection of exception rules on the exception policy.
	ExceptionRules []*ExceptionRule

	// Friendly name of this policy.
	Name *string
}

// A rule that defines actions to execute upon a specific trigger.
type ExceptionRule struct {
	// REQUIRED; A collection of actions to perform once the exception is triggered.
	Actions []ExceptionActionClassification

	// REQUIRED; Id of an exception rule.
	ID *string

	// REQUIRED; The trigger for this exception rule.
	Trigger ExceptionTriggerClassification
}

// Abstract base class for defining a trigger for exception rules.
type ExceptionTrigger struct {
	// REQUIRED; The type discriminator describing a sub-type of ExceptionTrigger.
	Kind *ExceptionTriggerKind
}

// GetExceptionTrigger implements the ExceptionTriggerClassification interface for type ExceptionTrigger.
func (e *ExceptionTrigger) GetExceptionTrigger() *ExceptionTrigger { return e }

// A rule providing inline expression rules.
type ExpressionRouterRule struct {
	// REQUIRED; An expression to evaluate. Should contain return statement with calculated values.
	Expression *string

	// CONSTANT; The type discriminator describing a sub-type of Rule.
// Field has constant value RouterRuleKindExpression, any specified value is ignored.
	Kind *RouterRuleKind

	// The expression language to compile to and execute.
	Language *ExpressionRouterRuleLanguage
}

// GetRouterRule implements the RouterRuleClassification interface for type ExpressionRouterRule.
func (e *ExpressionRouterRule) GetRouterRule() *RouterRule {
	return &RouterRule{
		Kind: e.Kind,
	}
}

// A rule providing a binding to an HTTP Triggered Azure Function.
type FunctionRouterRule struct {
	// REQUIRED; URL for Azure Function.
	FunctionURI *string

	// CONSTANT; The type discriminator describing a sub-type of Rule.
// Field has constant value RouterRuleKindFunction, any specified value is ignored.
	Kind *RouterRuleKind

	// Credentials used to access Azure function rule.
	Credential *FunctionRouterRuleCredential
}

// GetRouterRule implements the RouterRuleClassification interface for type FunctionRouterRule.
func (f *FunctionRouterRule) GetRouterRule() *RouterRule {
	return &RouterRule{
		Kind: f.Kind,
	}
}

// Credentials used to access Azure function rule.
type FunctionRouterRuleCredential struct {
	// Access key scoped to a Azure Function app. This key grants access to all functions under the app.
	AppKey *string

	// Client id, when AppKey is provided In context of Azure function, this is usually the name of the key.
	ClientID *string

	// Access key scoped to a particular function.
	FunctionKey *string
}

// A matching mode of one of the following types:
// QueueAndMatchMode: Used when matching worker to a job is required to be done right after job is queued.
// ScheduleAndSuspendMode: Used for scheduling jobs to be queued at a future time. At specified time, matching of a worker
// to the job will not start automatically.
// SuspendMode: Used when matching workers to a job needs to be suspended.
type JobMatchingMode struct {
	// REQUIRED; The type discriminator describing a sub-type of JobMatchingMode.
	Kind *JobMatchingModeKind
}

// GetJobMatchingMode implements the JobMatchingModeClassification interface for type JobMatchingMode.
func (j *JobMatchingMode) GetJobMatchingMode() *JobMatchingMode { return j }

// Jobs are directed to the worker who has been idle longest.
type LongestIdleMode struct {
	// CONSTANT; The type discriminator describing a sub-type of Mode.
// Field has constant value DistributionModeKindLongestIdle, any specified value is ignored.
	Kind *DistributionModeKind

	// If set to true, then router will match workers to jobs even if they don't match label selectors. Warning: You may get workers
// that are not qualified for a job they are matched with if you set this variable to true. This flag is intended more for
// temporary usage. By default, set to false.
	BypassSelectors *bool

	// Governs the maximum number of active concurrent offers a job can have.
	MaxConcurrentOffers *int32

	// Governs the minimum desired number of active concurrent offers a job can have.
	MinConcurrentOffers *int32
}

// GetDistributionMode implements the DistributionModeClassification interface for type LongestIdleMode.
func (l *LongestIdleMode) GetDistributionMode() *DistributionMode {
	return &DistributionMode{
		BypassSelectors: l.BypassSelectors,
		Kind: l.Kind,
		MaxConcurrentOffers: l.MaxConcurrentOffers,
		MinConcurrentOffers: l.MinConcurrentOffers,
	}
}

// An action that manually reclassifies a job by providing the queue, priority and worker selectors.
type ManualReclassifyExceptionAction struct {
	// CONSTANT; The type discriminator describing a sub-type of ExceptionAction.
// Field has constant value ExceptionActionKindManualReclassify, any specified value is ignored.
	Kind *ExceptionActionKind

	// Unique Id of the exception action.
	ID *string

	// Updated Priority.
	Priority *int32

	// Updated QueueId.
	QueueID *string

	// Updated WorkerSelectors.
	WorkerSelectors []*RouterWorkerSelector
}

// GetExceptionAction implements the ExceptionActionClassification interface for type ManualReclassifyExceptionAction.
func (m *ManualReclassifyExceptionAction) GetExceptionAction() *ExceptionAction {
	return &ExceptionAction{
		ID: m.ID,
		Kind: m.Kind,
	}
}

// OAuth2.0 Credentials used to Contoso's Authorization server. Reference: https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/
type OAuth2WebhookClientCredential struct {
	// ClientId for Contoso Authorization server.
	ClientID *string

	// Client secret for Contoso Authorization server.
	ClientSecret *string
}

// Paged collection of ClassificationPolicy items
type PagedClassificationPolicy struct {
	// REQUIRED; The ClassificationPolicy items on this page
	Value []*ClassificationPolicy

	// The link to the next page of items
	NextLink *string
}

// Paged collection of DistributionPolicy items
type PagedDistributionPolicy struct {
	// REQUIRED; The DistributionPolicy items on this page
	Value []*DistributionPolicy

	// The link to the next page of items
	NextLink *string
}

// Paged collection of ExceptionPolicy items
type PagedExceptionPolicy struct {
	// REQUIRED; The ExceptionPolicy items on this page
	Value []*ExceptionPolicy

	// The link to the next page of items
	NextLink *string
}

// Paged collection of RouterJob items
type PagedRouterJob struct {
	// REQUIRED; The RouterJob items on this page
	Value []*RouterJob

	// The link to the next page of items
	NextLink *string
}

// Paged collection of RouterQueue items
type PagedRouterQueue struct {
	// REQUIRED; The RouterQueue items on this page
	Value []*RouterQueue

	// The link to the next page of items
	NextLink *string
}

// Paged collection of RouterWorker items
type PagedRouterWorker struct {
	// REQUIRED; The RouterWorker items on this page
	Value []*RouterWorker

	// The link to the next page of items
	NextLink *string
}

// Attaches a queue selector where the value is passed through from a job's label with the same key.
type PassThroughQueueSelectorAttachment struct {
	// REQUIRED; The label key to query against.
	Key *string

	// CONSTANT; The type discriminator describing the type of queue selector attachment.
// Field has constant value QueueSelectorAttachmentKindPassThrough, any specified value is ignored.
	Kind *QueueSelectorAttachmentKind

	// REQUIRED; Describes how the value of the label is compared to the value pass through.
	LabelOperator *LabelOperator
}

// GetQueueSelectorAttachment implements the QueueSelectorAttachmentClassification interface for type PassThroughQueueSelectorAttachment.
func (p *PassThroughQueueSelectorAttachment) GetQueueSelectorAttachment() *QueueSelectorAttachment {
	return &QueueSelectorAttachment{
		Kind: p.Kind,
	}
}

// Attaches a worker selector where the value is passed through from a job's label with the same key.
type PassThroughWorkerSelectorAttachment struct {
	// REQUIRED; The label key to query against.
	Key *string

	// CONSTANT; The type discriminator describing the type of worker selector attachment.
// Field has constant value WorkerSelectorAttachmentKindPassThrough, any specified value is ignored.
	Kind *WorkerSelectorAttachmentKind

	// REQUIRED; Describes how the value of the label is compared to the value pass through.
	LabelOperator *LabelOperator

	// Describes how long the attached label selector is valid in seconds.
	ExpiresAfterSeconds *float64
}

// GetWorkerSelectorAttachment implements the WorkerSelectorAttachmentClassification interface for type PassThroughWorkerSelectorAttachment.
func (p *PassThroughWorkerSelectorAttachment) GetWorkerSelectorAttachment() *WorkerSelectorAttachment {
	return &WorkerSelectorAttachment{
		Kind: p.Kind,
	}
}

// Describes a matching mode where matching worker to a job is automatically started after job is queued successfully.
type QueueAndMatchMode struct {
	// CONSTANT; The type discriminator describing QueueAndMatchMode
// Field has constant value JobMatchingModeKindQueueAndMatch, any specified value is ignored.
	Kind *JobMatchingModeKind
}

// GetJobMatchingMode implements the JobMatchingModeClassification interface for type QueueAndMatchMode.
func (q *QueueAndMatchMode) GetJobMatchingMode() *JobMatchingMode {
	return &JobMatchingMode{
		Kind: q.Kind,
	}
}

// Trigger for an exception action on exceeding queue length.
type QueueLengthExceptionTrigger struct {
	// CONSTANT; The type discriminator describing a sub-type of ExceptionTrigger.
// Field has constant value ExceptionTriggerKindQueueLength, any specified value is ignored.
	Kind *ExceptionTriggerKind

	// REQUIRED; Threshold of number of jobs ahead in the queue to for this trigger to fire.
	Threshold *int32
}

// GetExceptionTrigger implements the ExceptionTriggerClassification interface for type QueueLengthExceptionTrigger.
func (q *QueueLengthExceptionTrigger) GetExceptionTrigger() *ExceptionTrigger {
	return &ExceptionTrigger{
		Kind: q.Kind,
	}
}

// An attachment of queue selectors to resolve a queue to a job from a classification policy.
type QueueSelectorAttachment struct {
	// REQUIRED; The type discriminator describing a sub-type of QueueSelectorAttachment.
	Kind *QueueSelectorAttachmentKind
}

// GetQueueSelectorAttachment implements the QueueSelectorAttachmentClassification interface for type QueueSelectorAttachment.
func (q *QueueSelectorAttachment) GetQueueSelectorAttachment() *QueueSelectorAttachment { return q }

// Contains the weight percentage and queue selectors to be applied if selected for weighted distributions.
type QueueWeightedAllocation struct {
	// REQUIRED; A collection of queue selectors that will be applied if this allocation is selected.
	QueueSelectors []*RouterQueueSelector

	// REQUIRED; The percentage of this weight, expressed as a fraction of 1.
	Weight *float64
}

// An action that modifies labels on a job and then reclassifies it.
type ReclassifyExceptionAction struct {
	// CONSTANT; The type discriminator describing a sub-type of ExceptionAction.
// Field has constant value ExceptionActionKindReclassify, any specified value is ignored.
	Kind *ExceptionActionKind

	// The new classification policy that will determine queue, priority and worker selectors.
	ClassificationPolicyID *string

	// Unique Id of the exception action.
	ID *string

	// Dictionary containing the labels to update (or add if not existing) in key-value pairs. Values must be primitive values
// - number, string, boolean.
	LabelsToUpsert map[string]any
}

// GetExceptionAction implements the ExceptionActionClassification interface for type ReclassifyExceptionAction.
func (r *ReclassifyExceptionAction) GetExceptionAction() *ExceptionAction {
	return &ExceptionAction{
		ID: r.ID,
		Kind: r.Kind,
	}
}

// Jobs are distributed in order to workers, starting with the worker that is after the last worker to receive a job.
type RoundRobinMode struct {
	// CONSTANT; The type discriminator describing a sub-type of Mode.
// Field has constant value DistributionModeKindRoundRobin, any specified value is ignored.
	Kind *DistributionModeKind

	// If set to true, then router will match workers to jobs even if they don't match label selectors. Warning: You may get workers
// that are not qualified for a job they are matched with if you set this variable to true. This flag is intended more for
// temporary usage. By default, set to false.
	BypassSelectors *bool

	// Governs the maximum number of active concurrent offers a job can have.
	MaxConcurrentOffers *int32

	// Governs the minimum desired number of active concurrent offers a job can have.
	MinConcurrentOffers *int32
}

// GetDistributionMode implements the DistributionModeClassification interface for type RoundRobinMode.
func (r *RoundRobinMode) GetDistributionMode() *DistributionMode {
	return &DistributionMode{
		BypassSelectors: r.BypassSelectors,
		Kind: r.Kind,
		MaxConcurrentOffers: r.MaxConcurrentOffers,
		MinConcurrentOffers: r.MinConcurrentOffers,
	}
}

// Represents the capacity a job in this channel will consume from a worker.
type RouterChannel struct {
	// REQUIRED; The amount of capacity that an instance of a job of this channel will consume of the total worker capacity.
	CapacityCostPerJob *int32

	// REQUIRED; Id of a channel.
	ChannelID *string

	// The maximum number of jobs that can be supported concurrently for this channel. Value must be greater than zero.
	MaxNumberOfJobs *int32
}

// A unit of work to be routed
type RouterJob struct {
	// REQUIRED; The entity tag for this resource.
	Etag *azcore.ETag

	// REQUIRED; Id of a job.
	ID *string

	// A collection of the assignments of the job. Key is AssignmentId.
	Assignments map[string]*RouterJobAssignment

	// A collection of worker selectors attached by a classification policy, which a worker must satisfy in order to process this
// job.
	AttachedWorkerSelectors []*RouterWorkerSelector

	// The channel identifier. eg. voice, chat, etc.
	ChannelID *string

	// Reference to an external parent context, eg. call ID.
	ChannelReference *string

	// Id of a classification policy used for classifying this job.
	ClassificationPolicyID *string

	// Reason code for cancelled or closed jobs.
	DispositionCode *string

	// Timestamp a job was queued in UTC.
	EnqueuedAt *time.Time

	// A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. Values must be primitive
// values - number, string, boolean.
	Labels map[string]any

	// If provided, will determine how job matching will be carried out. Default mode: QueueAndMatchMode.
	MatchingMode JobMatchingModeClassification

	// Notes attached to a job, sorted by timestamp.
	Notes []*RouterJobNote

	// Priority of this job. Value must be between -100 to 100.
	Priority *int32

	// Id of a queue that this job is queued to.
	QueueID *string

	// A collection of manually specified worker selectors, which a worker must satisfy in order to process this job.
	RequestedWorkerSelectors []*RouterWorkerSelector

	// If set, job will be scheduled to be enqueued at a given time.
	ScheduledAt *time.Time

	// The status of the job.
	Status *RouterJobStatus

	// A set of non-identifying attributes attached to this job. Values must be primitive values - number, string, boolean.
	Tags map[string]any
}

// Assignment details of a job to a worker.
type RouterJobAssignment struct {
	// REQUIRED; Timestamp when the job was assigned to a worker in UTC.
	AssignedAt *time.Time

	// REQUIRED; Id of a job assignment.
	AssignmentID *string

	// Timestamp when the job was marked as closed after being completed in UTC.
	ClosedAt *time.Time

	// Timestamp when the job was marked as completed after being assigned in UTC.
	CompletedAt *time.Time

	// Id of the Worker assigned to the job.
	WorkerID *string
}

// A note attached to a job.
type RouterJobNote struct {
	// REQUIRED; The message contained in the note.
	Message *string

	// The time at which the note was added in UTC. If not provided, will default to the current time.
	AddedAt *time.Time
}

// An offer of a job to a worker.
type RouterJobOffer struct {
	// REQUIRED; The capacity cost consumed by the job offer.
	CapacityCost *int32

	// REQUIRED; Id of the job.
	JobID *string

	// REQUIRED; Id of an offer.
	OfferID *string

	// Timestamp when the offer will expire in UTC.
	ExpiresAt *time.Time

	// Timestamp when the offer was created in UTC.
	OfferedAt *time.Time
}

// Position and estimated wait time for a job.
type RouterJobPositionDetails struct {
	// REQUIRED; Estimated wait time of the job rounded up to the nearest minute.
	EstimatedWaitTimeMinutes *float64

	// REQUIRED; Id of the job these details are about.
	JobID *string

	// REQUIRED; Position of the job in question within that queue.
	Position *int32

	// REQUIRED; Id of the queue this job is enqueued in.
	QueueID *string

	// REQUIRED; Length of the queue: total number of enqueued jobs.
	QueueLength *int32
}

// A queue that can contain jobs to be routed.
type RouterQueue struct {
	// REQUIRED; The entity tag for this resource.
	Etag *azcore.ETag

	// REQUIRED; Id of a queue.
	ID *string

	// Id of a distribution policy that will determine how a job is distributed to workers.
	DistributionPolicyID *string

	// Id of an exception policy that determines various job escalation rules.
	ExceptionPolicyID *string

	// A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. Values must be primitive
// values - number, string, boolean.
	Labels map[string]any

	// Friendly name of this queue.
	Name *string
}

// Describes a condition that must be met against a set of labels for queue selection.
type RouterQueueSelector struct {
	// REQUIRED; The label key to query against.
	Key *string

	// REQUIRED; Describes how the value of the label is compared to the value defined on the label selector.
	LabelOperator *LabelOperator

	// The value to compare against the actual label value with the given operator. Values must be primitive values - number,
// string, boolean.
	Value any
}

// Statistics for the queue.
type RouterQueueStatistics struct {
	// REQUIRED; Length of the queue: total number of enqueued jobs.
	Length *int32

	// REQUIRED; Id of the queue these details are about.
	QueueID *string

	// The estimated wait time of this queue rounded up to the nearest minute, grouped by job priority.
	EstimatedWaitTimeMinutes map[string]*float64

	// The wait time of the job that has been enqueued in this queue for the longest.
	LongestJobWaitTimeMinutes *float64
}

// A rule of one of the following types:
// StaticRule: A rule providing static rules that always return the same result, regardless of input.
// DirectMapRule: A rule that return the same labels as the input labels.
// ExpressionRule: A rule providing inline expression rules.
// FunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
// WebhookRule: A rule providing a binding to a webserver following OAuth2.0 authentication protocol.
type RouterRule struct {
	// REQUIRED; The type discriminator describing a sub-type of RouterRule
	Kind *RouterRuleKind
}

// GetRouterRule implements the RouterRuleClassification interface for type RouterRule.
func (r *RouterRule) GetRouterRule() *RouterRule { return r }

// An entity for jobs to be routed to.
type RouterWorker struct {
	// REQUIRED; The entity tag for this resource.
	Etag *azcore.ETag

	// REQUIRED; Id of a worker.
	ID *string

	// A list of assigned jobs attached to this worker.
	AssignedJobs []*RouterWorkerAssignment

	// A flag indicating this worker is open to receive offers or not.
	AvailableForOffers *bool

	// The total capacity score this worker has to manage multiple concurrent jobs.
	Capacity *int32

	// Collection of channel(s) this worker can handle and their impact on the workers capacity.
	Channels []*RouterChannel

	// A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. Values must be primitive
// values - number, string, boolean.
	Labels map[string]any

	// A value indicating the workers capacity. A value of '1' means all capacity is consumed. A value of '0' means no capacity
// is currently consumed.
	LoadRatio *float64

	// If this is set, the worker will only receive up to this many new offers at a time.
	MaxConcurrentOffers *int32

	// A list of active offers issued to this worker.
	Offers []*RouterJobOffer

	// Collection of queue(s) that this worker can receive work from.
	Queues []*string

	// Current state of a worker.
	State *RouterWorkerState

	// A set of non-identifying attributes attached to this worker. Values must be primitive values - number, string, boolean.
	Tags map[string]any
}

// The assignment for a worker to a job.
type RouterWorkerAssignment struct {
	// REQUIRED; The assignment time of the job in UTC.
	AssignedAt *time.Time

	// REQUIRED; Id of the assignment.
	AssignmentID *string

	// REQUIRED; The amount of capacity this assignment has consumed on the worker.
	CapacityCost *int32

	// REQUIRED; Id of the job assigned.
	JobID *string
}

// Describes a condition that must be met against a set of labels for worker selection.
type RouterWorkerSelector struct {
	// REQUIRED; The label key to query against.
	Key *string

	// REQUIRED; Describes how the value of the label is compared to the value defined on the worker selector.
	LabelOperator *LabelOperator

	// Pushes a job to the front of the queue as long as this selector is active.
	Expedite *bool

	// Describes how long this label selector is valid in seconds.
	ExpiresAfterSeconds *float64

	// The time at which this worker selector expires in UTC.
	ExpiresAt *time.Time

	// Status of the worker selector.
	Status *RouterWorkerSelectorStatus

	// The value to compare against the actual label value with the given operator. Values must be primitive values - number,
// string, boolean.
	Value any
}

// Attaches queue selectors to a job when the RouterRule is resolved.
type RuleEngineQueueSelectorAttachment struct {
	// CONSTANT; The type discriminator describing the type of queue selector attachment.
// Field has constant value QueueSelectorAttachmentKindRuleEngine, any specified value is ignored.
	Kind *QueueSelectorAttachmentKind

	// REQUIRED; A RouterRule that resolves a collection of queue selectors to attach.
	Rule RouterRuleClassification
}

// GetQueueSelectorAttachment implements the QueueSelectorAttachmentClassification interface for type RuleEngineQueueSelectorAttachment.
func (r *RuleEngineQueueSelectorAttachment) GetQueueSelectorAttachment() *QueueSelectorAttachment {
	return &QueueSelectorAttachment{
		Kind: r.Kind,
	}
}

// Attaches worker selectors to a job when a RouterRule is resolved.
type RuleEngineWorkerSelectorAttachment struct {
	// CONSTANT; The type discriminator describing the type of worker selector attachment.
// Field has constant value WorkerSelectorAttachmentKindRuleEngine, any specified value is ignored.
	Kind *WorkerSelectorAttachmentKind

	// REQUIRED; A RouterRule that resolves a collection of worker selectors to attach.
	Rule RouterRuleClassification
}

// GetWorkerSelectorAttachment implements the WorkerSelectorAttachmentClassification interface for type RuleEngineWorkerSelectorAttachment.
func (r *RuleEngineWorkerSelectorAttachment) GetWorkerSelectorAttachment() *WorkerSelectorAttachment {
	return &WorkerSelectorAttachment{
		Kind: r.Kind,
	}
}

// Describes a matching mode used for scheduling jobs to be queued at a future time. At the specified time, matching worker
// to a job will not start automatically.
type ScheduleAndSuspendMode struct {
	// CONSTANT; The type discriminator describing ScheduleAndSuspendMode
// Field has constant value JobMatchingModeKindScheduleAndSuspend, any specified value is ignored.
	Kind *JobMatchingModeKind

	// REQUIRED; Requested schedule time.
	ScheduleAt *time.Time
}

// GetJobMatchingMode implements the JobMatchingModeClassification interface for type ScheduleAndSuspendMode.
func (s *ScheduleAndSuspendMode) GetJobMatchingMode() *JobMatchingMode {
	return &JobMatchingMode{
		Kind: s.Kind,
	}
}

// Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode.
type ScoringRuleOptions struct {
	// Set batch size when 'isBatchScoringEnabled' is set to true. Defaults to 20 if not configured.
	BatchSize *int32

	// If false, will sort scores by ascending order. By default, set to true.
	DescendingOrder *bool

	// If set to true, will score workers in batches, and the parameter name of the worker labels will be sent as `workers`. By
// default, set to false and the parameter name for the worker labels will be sent as `worker`. Note: If enabled, use 'batchSize'
// to set batch size.
	IsBatchScoringEnabled *bool

	// List of extra parameters from a job that will be sent as part of the payload to scoring rule. If not set, a job's labels
// (sent in the payload as `job`) and a job's worker selectors (sent in the payload as `selectors`) are added to the payload
// of the scoring rule by default. Note: Worker labels are always sent with scoring payload.
	ScoringParameters []*ScoringRuleParameterSelector
}

// Describes a queue selector that will be attached to a job.
type StaticQueueSelectorAttachment struct {
	// CONSTANT; The type discriminator describing the type of queue selector attachment.
// Field has constant value QueueSelectorAttachmentKindStatic, any specified value is ignored.
	Kind *QueueSelectorAttachmentKind

	// REQUIRED; The queue selector to attach.
	QueueSelector *RouterQueueSelector
}

// GetQueueSelectorAttachment implements the QueueSelectorAttachmentClassification interface for type StaticQueueSelectorAttachment.
func (s *StaticQueueSelectorAttachment) GetQueueSelectorAttachment() *QueueSelectorAttachment {
	return &QueueSelectorAttachment{
		Kind: s.Kind,
	}
}

// A rule providing static rules that always return the same result, regardless of input.
type StaticRouterRule struct {
	// CONSTANT; The type discriminator describing a sub-type of Rule.
// Field has constant value RouterRuleKindStatic, any specified value is ignored.
	Kind *RouterRuleKind

	// The static value this rule always returns. Values must be primitive values - number, string, boolean.
	Value any
}

// GetRouterRule implements the RouterRuleClassification interface for type StaticRouterRule.
func (s *StaticRouterRule) GetRouterRule() *RouterRule {
	return &RouterRule{
		Kind: s.Kind,
	}
}

// Describes a worker selector that will be attached to a job.
type StaticWorkerSelectorAttachment struct {
	// CONSTANT; The type discriminator describing the type of worker selector attachment.
// Field has constant value WorkerSelectorAttachmentKindStatic, any specified value is ignored.
	Kind *WorkerSelectorAttachmentKind

	// REQUIRED; The worker selector to attach.
	WorkerSelector *RouterWorkerSelector
}

// GetWorkerSelectorAttachment implements the WorkerSelectorAttachmentClassification interface for type StaticWorkerSelectorAttachment.
func (s *StaticWorkerSelectorAttachment) GetWorkerSelectorAttachment() *WorkerSelectorAttachment {
	return &WorkerSelectorAttachment{
		Kind: s.Kind,
	}
}

// Describes a matching mode where matching worker to a job is suspended.
type SuspendMode struct {
	// CONSTANT; The type discriminator describing SuspendMode
// Field has constant value JobMatchingModeKindSuspend, any specified value is ignored.
	Kind *JobMatchingModeKind
}

// GetJobMatchingMode implements the JobMatchingModeClassification interface for type SuspendMode.
func (s *SuspendMode) GetJobMatchingMode() *JobMatchingMode {
	return &JobMatchingMode{
		Kind: s.Kind,
	}
}

// Request payload for unassigning a job.
type UnassignJobOptions struct {
	// If SuspendMatching is true, then a job is not queued for re-matching with a worker.
	SuspendMatching *bool
}

// Response payload after a job has been successfully unassigned.
type UnassignJobResult struct {
	// REQUIRED; Id of an unassigned job.
	JobID *string

	// REQUIRED; The number of times a job is unassigned. At a maximum 3.
	UnassignmentCount *int32
}

// Trigger for an exception action on exceeding wait time.
type WaitTimeExceptionTrigger struct {
	// CONSTANT; The type discriminator describing a sub-type of ExceptionTrigger.
// Field has constant value ExceptionTriggerKindWaitTime, any specified value is ignored.
	Kind *ExceptionTriggerKind

	// REQUIRED; Threshold for wait time for this trigger.
	ThresholdSeconds *float64
}

// GetExceptionTrigger implements the ExceptionTriggerClassification interface for type WaitTimeExceptionTrigger.
func (w *WaitTimeExceptionTrigger) GetExceptionTrigger() *ExceptionTrigger {
	return &ExceptionTrigger{
		Kind: w.Kind,
	}
}

// A rule providing a binding to an external web server.
type WebhookRouterRule struct {
	// CONSTANT; The type discriminator describing a sub-type of Rule.
// Field has constant value RouterRuleKindWebhook, any specified value is ignored.
	Kind *RouterRuleKind

	// Uri for Authorization Server.
	AuthorizationServerURI *string

	// OAuth2.0 Credentials used to Contoso's Authorization server. Reference: https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/
	ClientCredential *OAuth2WebhookClientCredential

	// Uri for Contoso's Web Server.
	WebhookURI *string
}

// GetRouterRule implements the RouterRuleClassification interface for type WebhookRouterRule.
func (w *WebhookRouterRule) GetRouterRule() *RouterRule {
	return &RouterRule{
		Kind: w.Kind,
	}
}

// Describes multiple sets of queue selectors, of which one will be selected and attached according to a weighting.
type WeightedAllocationQueueSelectorAttachment struct {
	// REQUIRED; A collection of percentage based weighted allocations.
	Allocations []*QueueWeightedAllocation

	// CONSTANT; The type discriminator describing the type of queue selector attachment.
// Field has constant value QueueSelectorAttachmentKindWeightedAllocation, any specified value is ignored.
	Kind *QueueSelectorAttachmentKind
}

// GetQueueSelectorAttachment implements the QueueSelectorAttachmentClassification interface for type WeightedAllocationQueueSelectorAttachment.
func (w *WeightedAllocationQueueSelectorAttachment) GetQueueSelectorAttachment() *QueueSelectorAttachment {
	return &QueueSelectorAttachment{
		Kind: w.Kind,
	}
}

// Describes multiple sets of worker selectors, of which one will be selected and attached according to a weighting.
type WeightedAllocationWorkerSelectorAttachment struct {
	// REQUIRED; A collection of percentage based weighted allocations.
	Allocations []*WorkerWeightedAllocation

	// CONSTANT; The type discriminator describing the type of worker selector attachment.
// Field has constant value WorkerSelectorAttachmentKindWeightedAllocation, any specified value is ignored.
	Kind *WorkerSelectorAttachmentKind
}

// GetWorkerSelectorAttachment implements the WorkerSelectorAttachmentClassification interface for type WeightedAllocationWorkerSelectorAttachment.
func (w *WeightedAllocationWorkerSelectorAttachment) GetWorkerSelectorAttachment() *WorkerSelectorAttachment {
	return &WorkerSelectorAttachment{
		Kind: w.Kind,
	}
}

// An attachment which attaches worker selectors to a job.
type WorkerSelectorAttachment struct {
	// REQUIRED; The type discriminator describing a sub-type of WorkerSelectorAttachment.
	Kind *WorkerSelectorAttachmentKind
}

// GetWorkerSelectorAttachment implements the WorkerSelectorAttachmentClassification interface for type WorkerSelectorAttachment.
func (w *WorkerSelectorAttachment) GetWorkerSelectorAttachment() *WorkerSelectorAttachment { return w }

// Contains the weight percentage and worker selectors to be applied if selected for weighted distributions.
type WorkerWeightedAllocation struct {
	// REQUIRED; The percentage of this weight, expressed as a fraction of 1.
	Weight *float64

	// REQUIRED; A collection of worker selectors that will be applied if this allocation is selected.
	WorkerSelectors []*RouterWorkerSelector
}

// Response payload from cancelling a job.
type cancelJobResult struct {
}

// Response payload from closing a job.
type closeJobResult struct {
}

// Response payload from completing a job.
type completeJobResult struct {
}

// Response payload from declining a job.
type declineJobOfferResult struct {
}

// Request payload for reclassifying jobs.
type reclassifyJobOptions struct {
}

// Response payload from reclassifying a job.
type reclassifyJobResult struct {
}

