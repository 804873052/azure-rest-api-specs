// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcommunication

import "encoding/json"

func unmarshalDistributionModeClassification(rawMsg json.RawMessage) (DistributionModeClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b DistributionModeClassification
	switch m["kind"] {
	case string(DistributionModeKindBestWorker):
		b = &BestWorkerMode{}
	case string(DistributionModeKindLongestIdle):
		b = &LongestIdleMode{}
	case string(DistributionModeKindRoundRobin):
		b = &RoundRobinMode{}
	default:
		b = &DistributionMode{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalExceptionActionClassification(rawMsg json.RawMessage) (ExceptionActionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ExceptionActionClassification
	switch m["kind"] {
	case string(ExceptionActionKindCancel):
		b = &CancelExceptionAction{}
	case string(ExceptionActionKindManualReclassify):
		b = &ManualReclassifyExceptionAction{}
	case string(ExceptionActionKindReclassify):
		b = &ReclassifyExceptionAction{}
	default:
		b = &ExceptionAction{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalExceptionActionClassificationArray(rawMsg json.RawMessage) ([]ExceptionActionClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]ExceptionActionClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalExceptionActionClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalExceptionTriggerClassification(rawMsg json.RawMessage) (ExceptionTriggerClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b ExceptionTriggerClassification
	switch m["kind"] {
	case string(ExceptionTriggerKindQueueLength):
		b = &QueueLengthExceptionTrigger{}
	case string(ExceptionTriggerKindWaitTime):
		b = &WaitTimeExceptionTrigger{}
	default:
		b = &ExceptionTrigger{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalJobMatchingModeClassification(rawMsg json.RawMessage) (JobMatchingModeClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b JobMatchingModeClassification
	switch m["kind"] {
	case string(JobMatchingModeKindScheduleAndSuspend):
		b = &ScheduleAndSuspendMode{}
	case string(JobMatchingModeKindQueueAndMatch):
		b = &QueueAndMatchMode{}
	case string(JobMatchingModeKindSuspend):
		b = &SuspendMode{}
	default:
		b = &JobMatchingMode{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalQueueSelectorAttachmentClassification(rawMsg json.RawMessage) (QueueSelectorAttachmentClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b QueueSelectorAttachmentClassification
	switch m["kind"] {
	case string(QueueSelectorAttachmentKindConditional):
		b = &ConditionalQueueSelectorAttachment{}
	case string(QueueSelectorAttachmentKindPassThrough):
		b = &PassThroughQueueSelectorAttachment{}
	case string(QueueSelectorAttachmentKindRuleEngine):
		b = &RuleEngineQueueSelectorAttachment{}
	case string(QueueSelectorAttachmentKindStatic):
		b = &StaticQueueSelectorAttachment{}
	case string(QueueSelectorAttachmentKindWeightedAllocation):
		b = &WeightedAllocationQueueSelectorAttachment{}
	default:
		b = &QueueSelectorAttachment{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalQueueSelectorAttachmentClassificationArray(rawMsg json.RawMessage) ([]QueueSelectorAttachmentClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]QueueSelectorAttachmentClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalQueueSelectorAttachmentClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

func unmarshalRouterRuleClassification(rawMsg json.RawMessage) (RouterRuleClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b RouterRuleClassification
	switch m["kind"] {
	case string(RouterRuleKindDirectMap):
		b = &DirectMapRouterRule{}
	case string(RouterRuleKindExpression):
		b = &ExpressionRouterRule{}
	case string(RouterRuleKindFunction):
		b = &FunctionRouterRule{}
	case string(RouterRuleKindStatic):
		b = &StaticRouterRule{}
	case string(RouterRuleKindWebhook):
		b = &WebhookRouterRule{}
	default:
		b = &RouterRule{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalWorkerSelectorAttachmentClassification(rawMsg json.RawMessage) (WorkerSelectorAttachmentClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var m map[string]any
	if err := json.Unmarshal(rawMsg, &m); err != nil {
		return nil, err
	}
	var b WorkerSelectorAttachmentClassification
	switch m["kind"] {
	case string(WorkerSelectorAttachmentKindConditional):
		b = &ConditionalWorkerSelectorAttachment{}
	case string(WorkerSelectorAttachmentKindPassThrough):
		b = &PassThroughWorkerSelectorAttachment{}
	case string(WorkerSelectorAttachmentKindRuleEngine):
		b = &RuleEngineWorkerSelectorAttachment{}
	case string(WorkerSelectorAttachmentKindStatic):
		b = &StaticWorkerSelectorAttachment{}
	case string(WorkerSelectorAttachmentKindWeightedAllocation):
		b = &WeightedAllocationWorkerSelectorAttachment{}
	default:
		b = &WorkerSelectorAttachment{}
	}
	if err := json.Unmarshal(rawMsg, b); err != nil {
		return nil, err
	}
	return b, nil
}

func unmarshalWorkerSelectorAttachmentClassificationArray(rawMsg json.RawMessage) ([]WorkerSelectorAttachmentClassification, error) {
	if rawMsg == nil || string(rawMsg) == "null" {
		return nil, nil
	}
	var rawMessages []json.RawMessage
	if err := json.Unmarshal(rawMsg, &rawMessages); err != nil {
		return nil, err
	}
	fArray := make([]WorkerSelectorAttachmentClassification, len(rawMessages))
	for index, rawMessage := range rawMessages {
		f, err := unmarshalWorkerSelectorAttachmentClassification(rawMessage)
		if err != nil {
			return nil, err
		}
		fArray[index] = f
	}
	return fArray, nil
}

