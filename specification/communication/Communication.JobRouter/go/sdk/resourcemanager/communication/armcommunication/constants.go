// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armcommunication

// DistributionModeKind - Discriminators for supported distribution mode types.
type DistributionModeKind string

const (
	// DistributionModeKindBestWorker - Discriminator value for BestWorkerMode.
	DistributionModeKindBestWorker DistributionModeKind = "bestWorker"
	// DistributionModeKindLongestIdle - Discriminator value for LongestIdleMode.
	DistributionModeKindLongestIdle DistributionModeKind = "longestIdle"
	// DistributionModeKindRoundRobin - Discriminator value for RoundRobinMode.
	DistributionModeKindRoundRobin DistributionModeKind = "roundRobin"
)

// PossibleDistributionModeKindValues returns the possible values for the DistributionModeKind const type.
func PossibleDistributionModeKindValues() []DistributionModeKind {
	return []DistributionModeKind{	
		DistributionModeKindBestWorker,
		DistributionModeKindLongestIdle,
		DistributionModeKindRoundRobin,
	}
}

// ExceptionActionKind - Discriminators for supported exception action types.
type ExceptionActionKind string

const (
	// ExceptionActionKindCancel - Discriminator value for CancelExceptionAction.
	ExceptionActionKindCancel ExceptionActionKind = "cancel"
	// ExceptionActionKindManualReclassify - Discriminator value for ManualReclassifyExceptionAction.
	ExceptionActionKindManualReclassify ExceptionActionKind = "manualReclassify"
	// ExceptionActionKindReclassify - Discriminator value for ReclassifyExceptionAction.
	ExceptionActionKindReclassify ExceptionActionKind = "reclassify"
)

// PossibleExceptionActionKindValues returns the possible values for the ExceptionActionKind const type.
func PossibleExceptionActionKindValues() []ExceptionActionKind {
	return []ExceptionActionKind{	
		ExceptionActionKindCancel,
		ExceptionActionKindManualReclassify,
		ExceptionActionKindReclassify,
	}
}

// ExceptionTriggerKind - Discriminators for supported exception trigger types.
type ExceptionTriggerKind string

const (
	// ExceptionTriggerKindQueueLength - Discriminator value for QueueLengthExceptionTrigger.
	ExceptionTriggerKindQueueLength ExceptionTriggerKind = "queueLength"
	// ExceptionTriggerKindWaitTime - Discriminator value for WaitTimeExceptionTrigger.
	ExceptionTriggerKindWaitTime ExceptionTriggerKind = "waitTime"
)

// PossibleExceptionTriggerKindValues returns the possible values for the ExceptionTriggerKind const type.
func PossibleExceptionTriggerKindValues() []ExceptionTriggerKind {
	return []ExceptionTriggerKind{	
		ExceptionTriggerKindQueueLength,
		ExceptionTriggerKindWaitTime,
	}
}

// ExpressionRouterRuleLanguage - Available expression languages that can be configured.
type ExpressionRouterRuleLanguage string

const (
	// ExpressionRouterRuleLanguagePowerFx - PowerFx
	ExpressionRouterRuleLanguagePowerFx ExpressionRouterRuleLanguage = "powerFx"
)

// PossibleExpressionRouterRuleLanguageValues returns the possible values for the ExpressionRouterRuleLanguage const type.
func PossibleExpressionRouterRuleLanguageValues() []ExpressionRouterRuleLanguage {
	return []ExpressionRouterRuleLanguage{	
		ExpressionRouterRuleLanguagePowerFx,
	}
}

// JobMatchingModeKind - Discriminators for supported matching mode types.
type JobMatchingModeKind string

const (
	// JobMatchingModeKindQueueAndMatch - Discriminator value for QueueAndMatchMode.
	JobMatchingModeKindQueueAndMatch JobMatchingModeKind = "queueAndMatch"
	// JobMatchingModeKindScheduleAndSuspend - Discriminator value for ScheduleAndSuspendMode.
	JobMatchingModeKindScheduleAndSuspend JobMatchingModeKind = "scheduleAndSuspend"
	// JobMatchingModeKindSuspend - Discriminator value for SuspendMode.
	JobMatchingModeKindSuspend JobMatchingModeKind = "suspend"
)

// PossibleJobMatchingModeKindValues returns the possible values for the JobMatchingModeKind const type.
func PossibleJobMatchingModeKindValues() []JobMatchingModeKind {
	return []JobMatchingModeKind{	
		JobMatchingModeKindQueueAndMatch,
		JobMatchingModeKindScheduleAndSuspend,
		JobMatchingModeKindSuspend,
	}
}

// LabelOperator - Describes supported operations on label values.
type LabelOperator string

const (
	// LabelOperatorEqual - Equal.
	LabelOperatorEqual LabelOperator = "equal"
	// LabelOperatorGreaterThan - Greater than.
	LabelOperatorGreaterThan LabelOperator = "greaterThan"
	// LabelOperatorGreaterThanOrEqual - Greater than or equal.
	LabelOperatorGreaterThanOrEqual LabelOperator = "greaterThanOrEqual"
	// LabelOperatorLessThan - Less than.
	LabelOperatorLessThan LabelOperator = "lessThan"
	// LabelOperatorLessThanOrEqual - Less than or equal.
	LabelOperatorLessThanOrEqual LabelOperator = "lessThanOrEqual"
	// LabelOperatorNotEqual - Not Equal.
	LabelOperatorNotEqual LabelOperator = "notEqual"
)

// PossibleLabelOperatorValues returns the possible values for the LabelOperator const type.
func PossibleLabelOperatorValues() []LabelOperator {
	return []LabelOperator{	
		LabelOperatorEqual,
		LabelOperatorGreaterThan,
		LabelOperatorGreaterThanOrEqual,
		LabelOperatorLessThan,
		LabelOperatorLessThanOrEqual,
		LabelOperatorNotEqual,
	}
}

// QueueSelectorAttachmentKind - Discriminators for supported queue selector attachment types.
type QueueSelectorAttachmentKind string

const (
	// QueueSelectorAttachmentKindConditional - Discriminator value for ConditionalQueueSelectorAttachment.
	QueueSelectorAttachmentKindConditional QueueSelectorAttachmentKind = "conditional"
	// QueueSelectorAttachmentKindPassThrough - Discriminator value for PassThroughQueueSelectorAttachment.
	QueueSelectorAttachmentKindPassThrough QueueSelectorAttachmentKind = "passThrough"
	// QueueSelectorAttachmentKindRuleEngine - Discriminator value for RuleEngineQueueSelectorAttachment.
	QueueSelectorAttachmentKindRuleEngine QueueSelectorAttachmentKind = "ruleEngine"
	// QueueSelectorAttachmentKindStatic - Discriminator value for StaticQueueSelectorAttachment.
	QueueSelectorAttachmentKindStatic QueueSelectorAttachmentKind = "static"
	// QueueSelectorAttachmentKindWeightedAllocation - Discriminator value for WeightedAllocationQueueSelectorAttachment.
	QueueSelectorAttachmentKindWeightedAllocation QueueSelectorAttachmentKind = "weightedAllocation"
)

// PossibleQueueSelectorAttachmentKindValues returns the possible values for the QueueSelectorAttachmentKind const type.
func PossibleQueueSelectorAttachmentKindValues() []QueueSelectorAttachmentKind {
	return []QueueSelectorAttachmentKind{	
		QueueSelectorAttachmentKindConditional,
		QueueSelectorAttachmentKindPassThrough,
		QueueSelectorAttachmentKindRuleEngine,
		QueueSelectorAttachmentKindStatic,
		QueueSelectorAttachmentKindWeightedAllocation,
	}
}

// RouterJobStatus - Describes the various status of a job.
type RouterJobStatus string

const (
	// RouterJobStatusAssigned - Job has been assigned to a worker.
	RouterJobStatusAssigned RouterJobStatus = "assigned"
	// RouterJobStatusCancelled - Job has been cancelled.
	RouterJobStatusCancelled RouterJobStatus = "cancelled"
	// RouterJobStatusClassificationFailed - Classification process failed for the job.
	RouterJobStatusClassificationFailed RouterJobStatus = "classificationFailed"
	// RouterJobStatusClosed - Job has been closed by a worker.
	RouterJobStatusClosed RouterJobStatus = "closed"
	// RouterJobStatusCompleted - Job has been completed by a worker.
	RouterJobStatusCompleted RouterJobStatus = "completed"
	// RouterJobStatusCreated - Job has been created.
	RouterJobStatusCreated RouterJobStatus = "created"
	// RouterJobStatusPendingClassification - Job is waiting to be classified.
	RouterJobStatusPendingClassification RouterJobStatus = "pendingClassification"
	// RouterJobStatusPendingSchedule - Job has been created but not been scheduled yet.
	RouterJobStatusPendingSchedule RouterJobStatus = "pendingSchedule"
	// RouterJobStatusQueued - Job has been queued.
	RouterJobStatusQueued RouterJobStatus = "queued"
	// RouterJobStatusScheduleFailed - Job scheduling failed.
	RouterJobStatusScheduleFailed RouterJobStatus = "scheduleFailed"
	// RouterJobStatusScheduled - Job has been scheduled successfully.
	RouterJobStatusScheduled RouterJobStatus = "scheduled"
	// RouterJobStatusWaitingForActivation - Job is in a suspended state and waiting for an update.
	RouterJobStatusWaitingForActivation RouterJobStatus = "waitingForActivation"
)

// PossibleRouterJobStatusValues returns the possible values for the RouterJobStatus const type.
func PossibleRouterJobStatusValues() []RouterJobStatus {
	return []RouterJobStatus{	
		RouterJobStatusAssigned,
		RouterJobStatusCancelled,
		RouterJobStatusClassificationFailed,
		RouterJobStatusClosed,
		RouterJobStatusCompleted,
		RouterJobStatusCreated,
		RouterJobStatusPendingClassification,
		RouterJobStatusPendingSchedule,
		RouterJobStatusQueued,
		RouterJobStatusScheduleFailed,
		RouterJobStatusScheduled,
		RouterJobStatusWaitingForActivation,
	}
}

// RouterJobStatusSelector - Enums used to filters jobs by status.
type RouterJobStatusSelector string

const (
	// RouterJobStatusSelectorActive - Job is in a state of PendingClassification or Queued or Assigned or ClassificationFailed
// or Completed or PendingSchedule or Scheduled or ScheduleFailed or WaitingForActivation.
	RouterJobStatusSelectorActive RouterJobStatusSelector = "active"
	// RouterJobStatusSelectorAll - Default
	RouterJobStatusSelectorAll RouterJobStatusSelector = "all"
	// RouterJobStatusSelectorAssigned - Job has been assigned to a worker.
	RouterJobStatusSelectorAssigned RouterJobStatusSelector = "assigned"
	// RouterJobStatusSelectorCancelled - Job has been cancelled.
	RouterJobStatusSelectorCancelled RouterJobStatusSelector = "cancelled"
	// RouterJobStatusSelectorClassificationFailed - Classification process failed for the job.
	RouterJobStatusSelectorClassificationFailed RouterJobStatusSelector = "classificationFailed"
	// RouterJobStatusSelectorClosed - Job has been closed by a worker.
	RouterJobStatusSelectorClosed RouterJobStatusSelector = "closed"
	// RouterJobStatusSelectorCompleted - Job has been completed by a worker.
	RouterJobStatusSelectorCompleted RouterJobStatusSelector = "completed"
	// RouterJobStatusSelectorCreated - Job has been created.
	RouterJobStatusSelectorCreated RouterJobStatusSelector = "created"
	// RouterJobStatusSelectorPendingClassification - Job is waiting to be classified.
	RouterJobStatusSelectorPendingClassification RouterJobStatusSelector = "pendingClassification"
	// RouterJobStatusSelectorPendingSchedule - Job has been created but not been scheduled yet.
	RouterJobStatusSelectorPendingSchedule RouterJobStatusSelector = "pendingSchedule"
	// RouterJobStatusSelectorQueued - Job has been queued.
	RouterJobStatusSelectorQueued RouterJobStatusSelector = "queued"
	// RouterJobStatusSelectorScheduleFailed - Job scheduling failed.
	RouterJobStatusSelectorScheduleFailed RouterJobStatusSelector = "scheduleFailed"
	// RouterJobStatusSelectorScheduled - Job has been scheduled successfully.
	RouterJobStatusSelectorScheduled RouterJobStatusSelector = "scheduled"
	// RouterJobStatusSelectorWaitingForActivation - Job is in a suspended state and waiting for an update.
	RouterJobStatusSelectorWaitingForActivation RouterJobStatusSelector = "waitingForActivation"
)

// PossibleRouterJobStatusSelectorValues returns the possible values for the RouterJobStatusSelector const type.
func PossibleRouterJobStatusSelectorValues() []RouterJobStatusSelector {
	return []RouterJobStatusSelector{	
		RouterJobStatusSelectorActive,
		RouterJobStatusSelectorAll,
		RouterJobStatusSelectorAssigned,
		RouterJobStatusSelectorCancelled,
		RouterJobStatusSelectorClassificationFailed,
		RouterJobStatusSelectorClosed,
		RouterJobStatusSelectorCompleted,
		RouterJobStatusSelectorCreated,
		RouterJobStatusSelectorPendingClassification,
		RouterJobStatusSelectorPendingSchedule,
		RouterJobStatusSelectorQueued,
		RouterJobStatusSelectorScheduleFailed,
		RouterJobStatusSelectorScheduled,
		RouterJobStatusSelectorWaitingForActivation,
	}
}

// RouterRuleKind - Discriminators for supported router rule types.
type RouterRuleKind string

const (
	// RouterRuleKindDirectMap - Discriminator value for DirectMapRouterRule.
	RouterRuleKindDirectMap RouterRuleKind = "directMap"
	// RouterRuleKindExpression - Discriminator value for ExpressionRouterRule.
	RouterRuleKindExpression RouterRuleKind = "expression"
	// RouterRuleKindFunction - Discriminator value for FunctionRouterRule.
	RouterRuleKindFunction RouterRuleKind = "function"
	// RouterRuleKindStatic - Discriminator value for StaticRouterRule.
	RouterRuleKindStatic RouterRuleKind = "static"
	// RouterRuleKindWebhook - Discriminator value for WebhookRouterRule.
	RouterRuleKindWebhook RouterRuleKind = "webhook"
)

// PossibleRouterRuleKindValues returns the possible values for the RouterRuleKind const type.
func PossibleRouterRuleKindValues() []RouterRuleKind {
	return []RouterRuleKind{	
		RouterRuleKindDirectMap,
		RouterRuleKindExpression,
		RouterRuleKindFunction,
		RouterRuleKindStatic,
		RouterRuleKindWebhook,
	}
}

// RouterWorkerSelectorStatus - Describes the status of a worker selector.
type RouterWorkerSelectorStatus string

const (
	// RouterWorkerSelectorStatusActive - Worker selector is valid.
	RouterWorkerSelectorStatusActive RouterWorkerSelectorStatus = "active"
	// RouterWorkerSelectorStatusExpired - Worker selector is not valid.
	RouterWorkerSelectorStatusExpired RouterWorkerSelectorStatus = "expired"
)

// PossibleRouterWorkerSelectorStatusValues returns the possible values for the RouterWorkerSelectorStatus const type.
func PossibleRouterWorkerSelectorStatusValues() []RouterWorkerSelectorStatus {
	return []RouterWorkerSelectorStatus{	
		RouterWorkerSelectorStatusActive,
		RouterWorkerSelectorStatusExpired,
	}
}

// RouterWorkerState - Enums for worker states.
type RouterWorkerState string

const (
	// RouterWorkerStateActive - Worker is active and available to take offers.
	RouterWorkerStateActive RouterWorkerState = "active"
	// RouterWorkerStateDraining - Worker is not active, if there are existing offers they are being revoked. No new offers are
// sent.
	RouterWorkerStateDraining RouterWorkerState = "draining"
	// RouterWorkerStateInactive - Worker is not active. No new offers are sent.
	RouterWorkerStateInactive RouterWorkerState = "inactive"
)

// PossibleRouterWorkerStateValues returns the possible values for the RouterWorkerState const type.
func PossibleRouterWorkerStateValues() []RouterWorkerState {
	return []RouterWorkerState{	
		RouterWorkerStateActive,
		RouterWorkerStateDraining,
		RouterWorkerStateInactive,
	}
}

// RouterWorkerStateSelector - Enums used to filters workers by state
type RouterWorkerStateSelector string

const (
	// RouterWorkerStateSelectorActive - Worker is active and available to take offers.
	RouterWorkerStateSelectorActive RouterWorkerStateSelector = "active"
	// RouterWorkerStateSelectorAll - Worker is active or draining or inactive.
	RouterWorkerStateSelectorAll RouterWorkerStateSelector = "all"
	// RouterWorkerStateSelectorDraining - Worker is not active, if there are existing offers they are being revoked. No new offers
// are sent.
	RouterWorkerStateSelectorDraining RouterWorkerStateSelector = "draining"
	// RouterWorkerStateSelectorInactive - Worker is not active. No new offers are sent.
	RouterWorkerStateSelectorInactive RouterWorkerStateSelector = "inactive"
)

// PossibleRouterWorkerStateSelectorValues returns the possible values for the RouterWorkerStateSelector const type.
func PossibleRouterWorkerStateSelectorValues() []RouterWorkerStateSelector {
	return []RouterWorkerStateSelector{	
		RouterWorkerStateSelectorActive,
		RouterWorkerStateSelectorAll,
		RouterWorkerStateSelectorDraining,
		RouterWorkerStateSelectorInactive,
	}
}

// ScoringRuleParameterSelector - Supported parameters for scoring workers used with BestWorkerMode.
type ScoringRuleParameterSelector string

const (
	// ScoringRuleParameterSelectorJobLabels - Parameter to add job labels to scoring payload. Property is sent as `job`.
	ScoringRuleParameterSelectorJobLabels ScoringRuleParameterSelector = "jobLabels"
	// ScoringRuleParameterSelectorWorkerSelectors - Parameter to add worker selectors from a job to scoring payload. Property
// is sent as `selectors`.
	ScoringRuleParameterSelectorWorkerSelectors ScoringRuleParameterSelector = "workerSelectors"
)

// PossibleScoringRuleParameterSelectorValues returns the possible values for the ScoringRuleParameterSelector const type.
func PossibleScoringRuleParameterSelectorValues() []ScoringRuleParameterSelector {
	return []ScoringRuleParameterSelector{	
		ScoringRuleParameterSelectorJobLabels,
		ScoringRuleParameterSelectorWorkerSelectors,
	}
}

// WorkerSelectorAttachmentKind - Discriminators for supported worker selector attachment types.
type WorkerSelectorAttachmentKind string

const (
	// WorkerSelectorAttachmentKindConditional - Discriminator value for ConditionalWorkerSelectorAttachment.
	WorkerSelectorAttachmentKindConditional WorkerSelectorAttachmentKind = "conditional"
	// WorkerSelectorAttachmentKindPassThrough - Discriminator value for PassThroughWorkerSelectorAttachment.
	WorkerSelectorAttachmentKindPassThrough WorkerSelectorAttachmentKind = "passThrough"
	// WorkerSelectorAttachmentKindRuleEngine - Discriminator value for RuleEngineWorkerSelectorAttachment.
	WorkerSelectorAttachmentKindRuleEngine WorkerSelectorAttachmentKind = "ruleEngine"
	// WorkerSelectorAttachmentKindStatic - Discriminator value for StaticWorkerSelectorAttachment.
	WorkerSelectorAttachmentKindStatic WorkerSelectorAttachmentKind = "static"
	// WorkerSelectorAttachmentKindWeightedAllocation - Discriminator value for WeightedAllocationWorkerSelectorAttachment.
	WorkerSelectorAttachmentKindWeightedAllocation WorkerSelectorAttachmentKind = "weightedAllocation"
)

// PossibleWorkerSelectorAttachmentKindValues returns the possible values for the WorkerSelectorAttachmentKind const type.
func PossibleWorkerSelectorAttachmentKindValues() []WorkerSelectorAttachmentKind {
	return []WorkerSelectorAttachmentKind{	
		WorkerSelectorAttachmentKindConditional,
		WorkerSelectorAttachmentKindPassThrough,
		WorkerSelectorAttachmentKindRuleEngine,
		WorkerSelectorAttachmentKindStatic,
		WorkerSelectorAttachmentKindWeightedAllocation,
	}
}

