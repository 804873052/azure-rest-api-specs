// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package typespec-go

// The request to add blocklistItems to a text blocklist.
type AddOrUpdateTextBlocklistItemsOptions struct {
	// REQUIRED; Array of blocklistItems to add.
	BlocklistItems []*TextBlocklistItem
}

// The response of adding blocklistItems to the text blocklist.
type AddOrUpdateTextBlocklistItemsResult struct {
	// REQUIRED; Array of blocklistItems have been added.
	BlocklistItems []*TextBlocklistItem
}

// The image analysis request.
type AnalyzeImageOptions struct {
	// REQUIRED; The image needs to be analyzed.
	Image *ImageData

	// The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories will be
// returned.
	Categories []*ImageCategory

	// This refers to the type of image analysis output. If no value is assigned, the default value will be "FourSeverityLevels".
	OutputType *AnalyzeImageOutputType
}

// The image analysis response.
type AnalyzeImageResult struct {
	// REQUIRED; Analysis result for categories.
	CategoriesAnalysis []*ImageCategoriesAnalysis
}

// The request of groundedness detection.
type AnalyzeTextGroundednessOptions struct {
	// REQUIRED; Leverages a vast array of grounding sources to validate AI-generated text.
// Limit: Restrictions on the total amount of grounding sources that can be analyzed in a single request are 55K characters.
	GroundingSources []*string

	// REQUIRED; The specific text that needs to be checked.
	Text *string

	// The domain of the text for analysis. Allowed values: Medical, Generic.
// This field is optional, with a default value of Generic.
	Domain *GroundednessDomain

	// Connection details for the LLM resource.
// This field will be used only when the 'reasoning' field is set to true; otherwise, it will be ignored.
	LlmResource *LLMResource

	// The user's question input in a QnA scenario.
// This field is optional, but if the task type is set to QnA, it becomes required.
	Qna *QnAOptions

	// A value indicating if the output includes an explanation for the identified groundedness.
// This field is optional, with a default value of false.
	Reasoning *bool

	// The task type for the text analysis. Type of task: QnA, Summarization.
// This field is optional, with a default value of Summarization.
	Task *GroundednessTask
}

// The response of groundedness detection.
type AnalyzeTextGroundednessResult struct {
	// REQUIRED; Provides insights into ungrounded content with specific examples and percentages.
	UngroundedDetails []*UngroundednessDetails

	// REQUIRED; Indicates whether the text exhibits ungroundedness.
	UngroundedDetected *bool

	// REQUIRED; Specifies the proportion of the text identified as ungrounded,
// expressed as a decimal between 0 and 1,
// where 0 indicates no grounded content and 1 indicates entirely grounded content..
	UngroundedPercentage *float32
}

// The text jailbreak analysis request.
type AnalyzeTextJailbreakOptions struct {
	// REQUIRED; The text needs to be analyzed if it attempt to jailbreak. We support a maximum of 1k Unicode characters (Unicode
// code points) in the text of one request.
	Text *string
}

// The text jailbreak analysis request.
type AnalyzeTextJailbreakResult struct {
	// REQUIRED; Analysis result for jailbreak.
	JailbreakAnalysis *JailbreakAnalysisResult
}

// The text analysis request.
type AnalyzeTextOptions struct {
	// REQUIRED; The text needs to be analyzed. We support a maximum of 10k Unicode characters (Unicode code points) in the text
// of one request.
	Text *string

	// The names of blocklists.
	BlocklistNames []*string

	// The categories will be analyzed. If they are not assigned, a default set of analysis results for the categories will be
// returned.
	Categories []*TextCategory

	// When set to true, further analyses of harmful content will not be performed in cases where blocklists are hit. When set
// to false, all analyses of harmful content will be performed, whether or not blocklists are hit.
	HaltOnBlocklistHit *bool

	// This refers to the type of text analysis output. If no value is assigned, the default value will be "FourSeverityLevels".
	OutputType *AnalyzeTextOutputType
}

// The text prompt injection attacks analysis request.
type AnalyzeTextPromptInjectionOptions struct {
	// The documents needs to be analyzed if they attempt to do direct or indirect injection attacks.
	Documents []*string

	// The user prompt needs to be analyzed if it attempts to do direct injection attacks.
	UserPrompt *string
}

// The text injection attacks analysis response.
type AnalyzeTextPromptInjectionResult struct {
	// Direct and indirect injection attacks analysis result for documents input.
	DocumentsAnalysis []*TextPromptInjectionResult

	// Direct injection analysis result for user prompt input.
	UserPromptAnalysis *TextPromptInjectionResult
}

// The protected material analysis request.
type AnalyzeTextProtectedMaterialOptions struct {
	// REQUIRED; The text needs to be analyzed. We support a maximum of 1k Unicode characters (Unicode code points) in the text
// of one request.
	Text *string
}

// The protected material analysis response.
type AnalyzeTextProtectedMaterialResult struct {
	// REQUIRED; Analysis result for protected material.
	ProtectedMaterialAnalysis *ProtectedMaterialAnalysisResult
}

// The text analysis response.
type AnalyzeTextResult struct {
	// REQUIRED; Analysis result for categories.
	CategoriesAnalysis []*TextCategoriesAnalysis

	// The blocklist match details.
	BlocklistsMatch []*TextBlocklistMatch
}

// Image analysis result.
type ImageCategoriesAnalysis struct {
	// REQUIRED; The image analysis category.
	Category *ImageCategory

	// The value increases with the severity of the input content. The value of this field is determined by the output type specified
// in the request. The output type could be ‘FourSeverityLevels’, and the output value can be 0, 2, 4, 6.
	Severity *int32
}

// The image can be either base64 encoded bytes or a blob URL. You can choose only one of these options. If both are provided,
// the request will be refused. The maximum image size is 2048 x 2048 pixels and should not exceed 4 MB, while the minimum
// image size is 50 x 50 pixels.
type ImageData struct {
	// The blob url of the image.
	BlobURL *string

	// The Base64 encoding of the image.
	Content []byte
}

// The index details.
type IndexDetails struct {
	// REQUIRED; Indicate the index with code point format.
	CodePoint *int64

	// REQUIRED; Indicate the index when encoding is UTF-16.
	UTF16 *int64

	// REQUIRED; Indicate the index when encoding is UTF-8.
	UTF8 *int64
}

// The text jailbreak analysis response.
type JailbreakAnalysisResult struct {
	// REQUIRED; Analysis result for jailbreak.
	Detected *bool
}

// Connection details for the LLM resource.
type LLMResource struct {
	// REQUIRED; Deployment model name.
	AzureOpenAIDeploymentName *string

	// REQUIRED; Endpoint for Azure OpenAI resource.
	AzureOpenAIEndpoint *string

	// LLM resource type. The default value is AzureOpenAI.
	ResourceType *LLMResourceType
}

// Paged collection of TextBlocklist items
type PagedTextBlocklist struct {
	// REQUIRED; The TextBlocklist items on this page
	Value []*TextBlocklist

	// The link to the next page of items
	NextLink *string
}

// Paged collection of TextBlocklistItem items
type PagedTextBlocklistItem struct {
	// REQUIRED; The TextBlocklistItem items on this page
	Value []*TextBlocklistItem

	// The link to the next page of items
	NextLink *string
}

// The text protected material analysis response.
type ProtectedMaterialAnalysisResult struct {
	// REQUIRED; Analysis result for protected material..
	Detected *bool
}

// The request of QnA options.
type QnAOptions struct {
	// REQUIRED; The user's question input in a QnA scenario.
	Query *string
}

// The request to remove blocklistItems from a text blocklist.
type RemoveTextBlocklistItemsOptions struct {
	// REQUIRED; Array of blocklistItemIds to remove.
	BlocklistItemIDs []*string
}

// Text Blocklist.
type TextBlocklist struct {
	// REQUIRED; Text blocklist name.
	BlocklistName *string

	// Text blocklist description.
	Description *string
}

// Item in a TextBlocklist.
type TextBlocklistItem struct {
	// REQUIRED; The service will generate a BlocklistItemId, which will be a UUID.
	BlocklistItemID *string

	// REQUIRED; BlocklistItem content.
	Text *string

	// BlocklistItem description.
	Description *string
}

// The result of blocklist match.
type TextBlocklistMatch struct {
	// REQUIRED; The ID of the matched item.
	BlocklistItemID *string

	// REQUIRED; The content of the matched item.
	BlocklistItemText *string

	// REQUIRED; The name of the matched blocklist.
	BlocklistName *string
}

// Text analysis result.
type TextCategoriesAnalysis struct {
	// REQUIRED; The text analysis category.
	Category *TextCategory

	// The value increases with the severity of the input content. The value of this field is determined by the output type specified
// in the request. The output type could be ‘FourSeverityLevels’ or ‘EightSeverity Levels’, and the output value can be 0,
// 2, 4, 6 or 0, 1, 2, 3, 4, 5, 6, or 7.
	Severity *int32
}

// The text injection attacks analysis response.
type TextPromptInjectionResult struct {
	// REQUIRED; Analysis result for whether the prompt is classified as an injection attack.
	AttackDetected *bool
}

// The detailed information about a text identified as ungroundedness.
type UngroundednessDetails struct {
	// REQUIRED; The length of the grounded text.
	Length *IndexDetails

	// REQUIRED; The offset when grounded text starts.
	Offset *IndexDetails

	// REQUIRED; The grounded text.
	Text *string

	// The explanation for detected ungroundedness, enhancing understanding.
// Only when the 'reasoning' field in the input is set to true 'reason' field will be returned.
	Reason *string
}

