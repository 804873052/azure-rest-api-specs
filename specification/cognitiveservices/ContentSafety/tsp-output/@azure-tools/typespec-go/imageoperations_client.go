// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package typespec-go

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"strings"
)

// ImageOperationsClient contains the methods for the ContentSafety namespace.
// Don't use this type directly, use [ContentSafetyClient.NewImageOperationsClient] instead.
type ImageOperationsClient struct {
	internal *azcore.Client
	endpoint string
}

// AnalyzeImage - Analyze Image
//   - body - The image analysis request.
//   - options - ImageOperationsClientAnalyzeImageOptions contains the optional parameters for the ImageOperationsClient.AnalyzeImage
//     method.
func (client *ImageOperationsClient) AnalyzeImage(ctx context.Context, body AnalyzeImageOptions, options *ImageOperationsClientAnalyzeImageOptions) (ImageOperationsClientAnalyzeImageResponse, error) {
	var err error
	req, err := client.analyzeImageCreateRequest(ctx, body, options)
	if err != nil {
		return ImageOperationsClientAnalyzeImageResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return ImageOperationsClientAnalyzeImageResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return ImageOperationsClientAnalyzeImageResponse{}, err
	}
	resp, err := client.analyzeImageHandleResponse(httpResp)
	return resp, err
}

// analyzeImageCreateRequest creates the AnalyzeImage request.
func (client *ImageOperationsClient) analyzeImageCreateRequest(ctx context.Context, body AnalyzeImageOptions, options *ImageOperationsClientAnalyzeImageOptions) (*policy.Request, error) {
	host := "{endpoint}/contentsafety"
	host = strings.ReplaceAll(host, "{endpoint}", client.endpoint)
	urlPath := "/image:analyze"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-02-15-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
	return nil, err
}
	return req, nil
}

// analyzeImageHandleResponse handles the AnalyzeImage response.
func (client *ImageOperationsClient) analyzeImageHandleResponse(resp *http.Response) (ImageOperationsClientAnalyzeImageResponse, error) {
	result := ImageOperationsClientAnalyzeImageResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.AnalyzeImageResult); err != nil {
		return ImageOperationsClientAnalyzeImageResponse{}, err
	}
	return result, nil
}

