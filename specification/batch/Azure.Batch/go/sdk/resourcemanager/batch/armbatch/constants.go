// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armbatch

// AccessScope - AccessScope enums
type AccessScope string

const (
	// AccessScopeJob - Grants access to perform all operations on the Job containing the Task.
	AccessScopeJob AccessScope = "job"
)

// PossibleAccessScopeValues returns the possible values for the AccessScope const type.
func PossibleAccessScopeValues() []AccessScope {
	return []AccessScope{	
		AccessScopeJob,
	}
}

// AllocationState - AllocationState enums
type AllocationState string

const (
	// AllocationStateResizing - The Pool is resizing; that is, Compute Nodes are being added to or removed from the Pool.
	AllocationStateResizing AllocationState = "resizing"
	// AllocationStateSteady - The Pool is not resizing. There are no changes to the number of Compute Nodes in the Pool in progress.
// A Pool enters this state when it is created and when no operations are being performed on the Pool to change the number
// of Compute Nodes.
	AllocationStateSteady AllocationState = "steady"
	// AllocationStateStopping - The Pool was resizing, but the user has requested that the resize be stopped, but the stop request
// has not yet been completed.
	AllocationStateStopping AllocationState = "stopping"
)

// PossibleAllocationStateValues returns the possible values for the AllocationState const type.
func PossibleAllocationStateValues() []AllocationState {
	return []AllocationState{	
		AllocationStateResizing,
		AllocationStateSteady,
		AllocationStateStopping,
	}
}

// AutoUserScope - AutoUserScope enums
type AutoUserScope string

const (
	// AutoUserScopePool - Specifies that the Task runs as the common auto user Account which is created on every Compute Node
// in a Pool.
	AutoUserScopePool AutoUserScope = "pool"
	// AutoUserScopeTask - Specifies that the service should create a new user for the Task.
	AutoUserScopeTask AutoUserScope = "task"
)

// PossibleAutoUserScopeValues returns the possible values for the AutoUserScope const type.
func PossibleAutoUserScopeValues() []AutoUserScope {
	return []AutoUserScope{	
		AutoUserScopePool,
		AutoUserScopeTask,
	}
}

// BatchCertificateFormat - BatchCertificateFormat enums
type BatchCertificateFormat string

const (
	// BatchCertificateFormatCer - The Certificate is a base64-encoded X.509 Certificate.
	BatchCertificateFormatCer BatchCertificateFormat = "cer"
	// BatchCertificateFormatPfx - The Certificate is a PFX (PKCS#12) formatted Certificate or Certificate chain.
	BatchCertificateFormatPfx BatchCertificateFormat = "pfx"
)

// PossibleBatchCertificateFormatValues returns the possible values for the BatchCertificateFormat const type.
func PossibleBatchCertificateFormatValues() []BatchCertificateFormat {
	return []BatchCertificateFormat{	
		BatchCertificateFormatCer,
		BatchCertificateFormatPfx,
	}
}

// BatchCertificateState - BatchCertificateState enums
type BatchCertificateState string

const (
	// BatchCertificateStateActive - The Certificate is available for use in Pools.
	BatchCertificateStateActive BatchCertificateState = "active"
	// BatchCertificateStateDeleteFailed - The user requested that the Certificate be deleted, but there are Pools that still
// have references to the Certificate, or it is still installed on one or more Nodes. (The latter can occur if the Certificate
// has been removed from the Pool, but the Compute Node has not yet restarted. Compute Nodes refresh their Certificates only
// when they restart.) You may use the cancel Certificate delete operation to cancel the delete, or the delete Certificate
// operation to retry the delete.
	BatchCertificateStateDeleteFailed BatchCertificateState = "deletefailed"
	// BatchCertificateStateDeleting - The user has requested that the Certificate be deleted, but the delete operation has not
// yet completed. You may not reference the Certificate when creating or updating Pools.
	BatchCertificateStateDeleting BatchCertificateState = "deleting"
)

// PossibleBatchCertificateStateValues returns the possible values for the BatchCertificateState const type.
func PossibleBatchCertificateStateValues() []BatchCertificateState {
	return []BatchCertificateState{	
		BatchCertificateStateActive,
		BatchCertificateStateDeleteFailed,
		BatchCertificateStateDeleting,
	}
}

// BatchCertificateStoreLocation - BatchCertificateStoreLocation enums
type BatchCertificateStoreLocation string

const (
	// BatchCertificateStoreLocationCurrentUser - Certificates should be installed to the CurrentUser Certificate store.
	BatchCertificateStoreLocationCurrentUser BatchCertificateStoreLocation = "currentuser"
	// BatchCertificateStoreLocationLocalMachine - Certificates should be installed to the LocalMachine Certificate store.
	BatchCertificateStoreLocationLocalMachine BatchCertificateStoreLocation = "localmachine"
)

// PossibleBatchCertificateStoreLocationValues returns the possible values for the BatchCertificateStoreLocation const type.
func PossibleBatchCertificateStoreLocationValues() []BatchCertificateStoreLocation {
	return []BatchCertificateStoreLocation{	
		BatchCertificateStoreLocationCurrentUser,
		BatchCertificateStoreLocationLocalMachine,
	}
}

// BatchCertificateVisibility - BatchCertificateVisibility enums
type BatchCertificateVisibility string

const (
	// BatchCertificateVisibilityRemoteUser - The Certificate should be visible to the user accounts under which users remotely
// access the Compute Node.
	BatchCertificateVisibilityRemoteUser BatchCertificateVisibility = "remoteuser"
	// BatchCertificateVisibilityStartTask - The Certificate should be visible to the user account under which the StartTask is
// run. Note that if AutoUser Scope is Pool for both the StartTask and a Task, this certificate will be visible to the Task
// as well.
	BatchCertificateVisibilityStartTask BatchCertificateVisibility = "starttask"
	// BatchCertificateVisibilityTask - The Certificate should be visible to the user accounts under which Job Tasks are run.
	BatchCertificateVisibilityTask BatchCertificateVisibility = "task"
)

// PossibleBatchCertificateVisibilityValues returns the possible values for the BatchCertificateVisibility const type.
func PossibleBatchCertificateVisibilityValues() []BatchCertificateVisibility {
	return []BatchCertificateVisibility{	
		BatchCertificateVisibilityRemoteUser,
		BatchCertificateVisibilityStartTask,
		BatchCertificateVisibilityTask,
	}
}

// BatchJobAction - BatchJobAction enums
type BatchJobAction string

const (
	// BatchJobActionDisable - Disable the Job. This is equivalent to calling the disable Job API, with a disableTasks value of
// requeue.
	BatchJobActionDisable BatchJobAction = "disable"
	// BatchJobActionNone - Take no action.
	BatchJobActionNone BatchJobAction = "none"
	// BatchJobActionTerminate - Terminate the Job. The terminationReason in the Job's executionInfo is set to "TaskFailed".
	BatchJobActionTerminate BatchJobAction = "terminate"
)

// PossibleBatchJobActionValues returns the possible values for the BatchJobAction const type.
func PossibleBatchJobActionValues() []BatchJobAction {
	return []BatchJobAction{	
		BatchJobActionDisable,
		BatchJobActionNone,
		BatchJobActionTerminate,
	}
}

// BatchJobPreparationTaskState - BatchJobPreparationTaskState enums
type BatchJobPreparationTaskState string

const (
	// BatchJobPreparationTaskStateCompleted - The Task has exited with exit code 0, or the Task has exhausted its retry limit,
// or the Batch service was unable to start the Task due to Task preparation errors (such as resource file download failures).
	BatchJobPreparationTaskStateCompleted BatchJobPreparationTaskState = "completed"
	// BatchJobPreparationTaskStateRunning - The Task is currently running (including retrying).
	BatchJobPreparationTaskStateRunning BatchJobPreparationTaskState = "running"
)

// PossibleBatchJobPreparationTaskStateValues returns the possible values for the BatchJobPreparationTaskState const type.
func PossibleBatchJobPreparationTaskStateValues() []BatchJobPreparationTaskState {
	return []BatchJobPreparationTaskState{	
		BatchJobPreparationTaskStateCompleted,
		BatchJobPreparationTaskStateRunning,
	}
}

// BatchJobReleaseTaskState - BatchJobReleaseTaskState enums
type BatchJobReleaseTaskState string

const (
	// BatchJobReleaseTaskStateCompleted - The Task has exited with exit code 0, or the Task has exhausted its retry limit, or
// the Batch service was unable to start the Task due to Task preparation errors (such as resource file download failures).
	BatchJobReleaseTaskStateCompleted BatchJobReleaseTaskState = "completed"
	// BatchJobReleaseTaskStateRunning - The Task is currently running (including retrying).
	BatchJobReleaseTaskStateRunning BatchJobReleaseTaskState = "running"
)

// PossibleBatchJobReleaseTaskStateValues returns the possible values for the BatchJobReleaseTaskState const type.
func PossibleBatchJobReleaseTaskStateValues() []BatchJobReleaseTaskState {
	return []BatchJobReleaseTaskState{	
		BatchJobReleaseTaskStateCompleted,
		BatchJobReleaseTaskStateRunning,
	}
}

// BatchJobScheduleState - BatchJobScheduleState enums
type BatchJobScheduleState string

const (
	// BatchJobScheduleStateActive - The Job Schedule is active and will create Jobs as per its schedule.
	BatchJobScheduleStateActive BatchJobScheduleState = "active"
	// BatchJobScheduleStateCompleted - The Job Schedule has terminated, either by reaching its end time or by the user terminating
// it explicitly.
	BatchJobScheduleStateCompleted BatchJobScheduleState = "completed"
	// BatchJobScheduleStateDeleting - The user has requested that the Job Schedule be deleted, but the delete operation is still
// in progress. The scheduler will not initiate any new Jobs for this Job Schedule, and will delete any existing Jobs and
// Tasks under the Job Schedule, including any active Job. The Job Schedule will be deleted when all Jobs and Tasks under
// the Job Schedule have been deleted.
	BatchJobScheduleStateDeleting BatchJobScheduleState = "deleting"
	// BatchJobScheduleStateDisabled - The user has disabled the Job Schedule. The scheduler will not initiate any new Jobs will
// on this schedule, but any existing active Job will continue to run.
	BatchJobScheduleStateDisabled BatchJobScheduleState = "disabled"
	// BatchJobScheduleStateTerminating - The Job Schedule has no more work to do, or has been explicitly terminated by the user,
// but the termination operation is still in progress. The scheduler will not initiate any new Jobs for this Job Schedule,
// nor is any existing Job active.
	BatchJobScheduleStateTerminating BatchJobScheduleState = "terminating"
)

// PossibleBatchJobScheduleStateValues returns the possible values for the BatchJobScheduleState const type.
func PossibleBatchJobScheduleStateValues() []BatchJobScheduleState {
	return []BatchJobScheduleState{	
		BatchJobScheduleStateActive,
		BatchJobScheduleStateCompleted,
		BatchJobScheduleStateDeleting,
		BatchJobScheduleStateDisabled,
		BatchJobScheduleStateTerminating,
	}
}

// BatchJobState - BatchJobState enums
type BatchJobState string

const (
	// BatchJobStateActive - The Job is available to have Tasks scheduled.
	BatchJobStateActive BatchJobState = "active"
	// BatchJobStateCompleted - All Tasks have terminated, and the system will not accept any more Tasks or any further changes
// to the Job.
	BatchJobStateCompleted BatchJobState = "completed"
	// BatchJobStateDeleting - A user has requested that the Job be deleted, but the delete operation is still in progress (for
// example, because the system is still terminating running Tasks).
	BatchJobStateDeleting BatchJobState = "deleting"
	// BatchJobStateDisabled - A user has disabled the Job. No Tasks are running, and no new Tasks will be scheduled.
	BatchJobStateDisabled BatchJobState = "disabled"
	// BatchJobStateDisabling - A user has requested that the Job be disabled, but the disable operation is still in progress
// (for example, waiting for Tasks to terminate).
	BatchJobStateDisabling BatchJobState = "disabling"
	// BatchJobStateEnabling - A user has requested that the Job be enabled, but the enable operation is still in progress.
	BatchJobStateEnabling BatchJobState = "enabling"
	// BatchJobStateTerminating - The Job is about to complete, either because a Job Manager Task has completed or because the
// user has terminated the Job, but the terminate operation is still in progress (for example, because Job Release Tasks are
// running).
	BatchJobStateTerminating BatchJobState = "terminating"
)

// PossibleBatchJobStateValues returns the possible values for the BatchJobState const type.
func PossibleBatchJobStateValues() []BatchJobState {
	return []BatchJobState{	
		BatchJobStateActive,
		BatchJobStateCompleted,
		BatchJobStateDeleting,
		BatchJobStateDisabled,
		BatchJobStateDisabling,
		BatchJobStateEnabling,
		BatchJobStateTerminating,
	}
}

// BatchNodeCommunicationMode - BatchNodeCommunicationMode enums
type BatchNodeCommunicationMode string

const (
	// BatchNodeCommunicationModeClassic - Nodes using the classic communication mode require inbound TCP communication on ports
// 29876 and 29877 from the "BatchNodeManagement.{region}" service tag and outbound TCP communication on port 443 to the "Storage.region"
// and "BatchNodeManagement.{region}" service tags.
	BatchNodeCommunicationModeClassic BatchNodeCommunicationMode = "classic"
	// BatchNodeCommunicationModeDefault - The node communication mode is automatically set by the Batch service.
	BatchNodeCommunicationModeDefault BatchNodeCommunicationMode = "default"
	// BatchNodeCommunicationModeSimplified - Nodes using the simplified communication mode require outbound TCP communication
// on port 443 to the "BatchNodeManagement.{region}" service tag. No open inbound ports are required.
	BatchNodeCommunicationModeSimplified BatchNodeCommunicationMode = "simplified"
)

// PossibleBatchNodeCommunicationModeValues returns the possible values for the BatchNodeCommunicationMode const type.
func PossibleBatchNodeCommunicationModeValues() []BatchNodeCommunicationMode {
	return []BatchNodeCommunicationMode{	
		BatchNodeCommunicationModeClassic,
		BatchNodeCommunicationModeDefault,
		BatchNodeCommunicationModeSimplified,
	}
}

// BatchNodeDeallocationOption - BatchNodeDeallocationOption enums
type BatchNodeDeallocationOption string

const (
	// BatchNodeDeallocationOptionRequeue - Terminate running Task processes and requeue the Tasks. The Tasks will run again when
// a Compute Node is available. Remove Compute Nodes as soon as Tasks have been terminated.
	BatchNodeDeallocationOptionRequeue BatchNodeDeallocationOption = "requeue"
	// BatchNodeDeallocationOptionRetainedData - Allow currently running Tasks to complete, then wait for all Task data retention
// periods to expire. Schedule no new Tasks while waiting. Remove Compute Nodes when all Task retention periods have expired.
	BatchNodeDeallocationOptionRetainedData BatchNodeDeallocationOption = "retaineddata"
	// BatchNodeDeallocationOptionTaskCompletion - Allow currently running Tasks to complete. Schedule no new Tasks while waiting.
// Remove Compute Nodes when all Tasks have completed.
	BatchNodeDeallocationOptionTaskCompletion BatchNodeDeallocationOption = "taskcompletion"
	// BatchNodeDeallocationOptionTerminate - Terminate running Tasks. The Tasks will be completed with failureInfo indicating
// that they were terminated, and will not run again. Remove Compute Nodes as soon as Tasks have been terminated.
	BatchNodeDeallocationOptionTerminate BatchNodeDeallocationOption = "terminate"
)

// PossibleBatchNodeDeallocationOptionValues returns the possible values for the BatchNodeDeallocationOption const type.
func PossibleBatchNodeDeallocationOptionValues() []BatchNodeDeallocationOption {
	return []BatchNodeDeallocationOption{	
		BatchNodeDeallocationOptionRequeue,
		BatchNodeDeallocationOptionRetainedData,
		BatchNodeDeallocationOptionTaskCompletion,
		BatchNodeDeallocationOptionTerminate,
	}
}

// BatchNodeDisableSchedulingOption - BatchNodeDisableSchedulingOption enums
type BatchNodeDisableSchedulingOption string

const (
	// BatchNodeDisableSchedulingOptionRequeue - Terminate running Task processes and requeue the Tasks. The Tasks may run again
// on other Compute Nodes, or when Task scheduling is re-enabled on this Compute Node. Enter offline state as soon as Tasks
// have been terminated.
	BatchNodeDisableSchedulingOptionRequeue BatchNodeDisableSchedulingOption = "requeue"
	// BatchNodeDisableSchedulingOptionTaskCompletion - Allow currently running Tasks to complete. Schedule no new Tasks while
// waiting. Enter offline state when all Tasks have completed.
	BatchNodeDisableSchedulingOptionTaskCompletion BatchNodeDisableSchedulingOption = "taskcompletion"
	// BatchNodeDisableSchedulingOptionTerminate - Terminate running Tasks. The Tasks will be completed with failureInfo indicating
// that they were terminated, and will not run again. Enter offline state as soon as Tasks have been terminated.
	BatchNodeDisableSchedulingOptionTerminate BatchNodeDisableSchedulingOption = "terminate"
)

// PossibleBatchNodeDisableSchedulingOptionValues returns the possible values for the BatchNodeDisableSchedulingOption const type.
func PossibleBatchNodeDisableSchedulingOptionValues() []BatchNodeDisableSchedulingOption {
	return []BatchNodeDisableSchedulingOption{	
		BatchNodeDisableSchedulingOptionRequeue,
		BatchNodeDisableSchedulingOptionTaskCompletion,
		BatchNodeDisableSchedulingOptionTerminate,
	}
}

// BatchNodeFillType - BatchNodeFillType enums
type BatchNodeFillType string

const (
	// BatchNodeFillTypePack - As many Tasks as possible (taskSlotsPerNode) should be assigned to each Compute Node in the Pool
// before any Tasks are assigned to the next Compute Node in the Pool.
	BatchNodeFillTypePack BatchNodeFillType = "pack"
	// BatchNodeFillTypeSpread - Tasks should be assigned evenly across all Compute Nodes in the Pool.
	BatchNodeFillTypeSpread BatchNodeFillType = "spread"
)

// PossibleBatchNodeFillTypeValues returns the possible values for the BatchNodeFillType const type.
func PossibleBatchNodeFillTypeValues() []BatchNodeFillType {
	return []BatchNodeFillType{	
		BatchNodeFillTypePack,
		BatchNodeFillTypeSpread,
	}
}

// BatchNodePlacementPolicyType - BatchNodePlacementPolicyType enums
type BatchNodePlacementPolicyType string

const (
	// BatchNodePlacementPolicyTypeRegional - All nodes in the pool will be allocated in the same region.
	BatchNodePlacementPolicyTypeRegional BatchNodePlacementPolicyType = "regional"
	// BatchNodePlacementPolicyTypeZonal - Nodes in the pool will be spread across different availability zones with best effort
// balancing.
	BatchNodePlacementPolicyTypeZonal BatchNodePlacementPolicyType = "zonal"
)

// PossibleBatchNodePlacementPolicyTypeValues returns the possible values for the BatchNodePlacementPolicyType const type.
func PossibleBatchNodePlacementPolicyTypeValues() []BatchNodePlacementPolicyType {
	return []BatchNodePlacementPolicyType{	
		BatchNodePlacementPolicyTypeRegional,
		BatchNodePlacementPolicyTypeZonal,
	}
}

// BatchNodeRebootOption - BatchNodeRebootOption enums
type BatchNodeRebootOption string

const (
	// BatchNodeRebootOptionRequeue - Terminate running Task processes and requeue the Tasks. The Tasks will run again when a
// Compute Node is available. Restart the Compute Node as soon as Tasks have been terminated.
	BatchNodeRebootOptionRequeue BatchNodeRebootOption = "requeue"
	// BatchNodeRebootOptionRetainedData - Allow currently running Tasks to complete, then wait for all Task data retention periods
// to expire. Schedule no new Tasks while waiting. Restart the Compute Node when all Task retention periods have expired.
	BatchNodeRebootOptionRetainedData BatchNodeRebootOption = "retaineddata"
	// BatchNodeRebootOptionTaskCompletion - Allow currently running Tasks to complete. Schedule no new Tasks while waiting. Restart
// the Compute Node when all Tasks have completed.
	BatchNodeRebootOptionTaskCompletion BatchNodeRebootOption = "taskcompletion"
	// BatchNodeRebootOptionTerminate - Terminate running Tasks. The Tasks will be completed with failureInfo indicating that
// they were terminated, and will not run again. Restart the Compute Node as soon as Tasks have been terminated.
	BatchNodeRebootOptionTerminate BatchNodeRebootOption = "terminate"
)

// PossibleBatchNodeRebootOptionValues returns the possible values for the BatchNodeRebootOption const type.
func PossibleBatchNodeRebootOptionValues() []BatchNodeRebootOption {
	return []BatchNodeRebootOption{	
		BatchNodeRebootOptionRequeue,
		BatchNodeRebootOptionRetainedData,
		BatchNodeRebootOptionTaskCompletion,
		BatchNodeRebootOptionTerminate,
	}
}

// BatchNodeReimageOption - BatchNodeReimageOption enums
type BatchNodeReimageOption string

const (
	// BatchNodeReimageOptionRequeue - Terminate running Task processes and requeue the Tasks. The Tasks will run again when a
// Compute Node is available. Reimage the Compute Node as soon as Tasks have been terminated.
	BatchNodeReimageOptionRequeue BatchNodeReimageOption = "requeue"
	// BatchNodeReimageOptionRetainedData - Allow currently running Tasks to complete, then wait for all Task data retention periods
// to expire. Schedule no new Tasks while waiting. Reimage the Compute Node when all Task retention periods have expired.
	BatchNodeReimageOptionRetainedData BatchNodeReimageOption = "retaineddata"
	// BatchNodeReimageOptionTaskCompletion - Allow currently running Tasks to complete. Schedule no new Tasks while waiting.
// Reimage the Compute Node when all Tasks have completed.
	BatchNodeReimageOptionTaskCompletion BatchNodeReimageOption = "taskcompletion"
	// BatchNodeReimageOptionTerminate - Terminate running Tasks. The Tasks will be completed with failureInfo indicating that
// they were terminated, and will not run again. Reimage the Compute Node as soon as Tasks have been terminated.
	BatchNodeReimageOptionTerminate BatchNodeReimageOption = "terminate"
)

// PossibleBatchNodeReimageOptionValues returns the possible values for the BatchNodeReimageOption const type.
func PossibleBatchNodeReimageOptionValues() []BatchNodeReimageOption {
	return []BatchNodeReimageOption{	
		BatchNodeReimageOptionRequeue,
		BatchNodeReimageOptionRetainedData,
		BatchNodeReimageOptionTaskCompletion,
		BatchNodeReimageOptionTerminate,
	}
}

// BatchNodeState - BatchNodeState enums
type BatchNodeState string

const (
	// BatchNodeStateCreating - The Batch service has obtained the underlying virtual machine from Azure Compute, but it has not
// yet started to join the Pool.
	BatchNodeStateCreating BatchNodeState = "creating"
	// BatchNodeStateIdle - The Compute Node is not currently running a Task.
	BatchNodeStateIdle BatchNodeState = "idle"
	// BatchNodeStateLeavingPool - The Compute Node is leaving the Pool, either because the user explicitly removed it or because
// the Pool is resizing or autoscaling down.
	BatchNodeStateLeavingPool BatchNodeState = "leavingpool"
	// BatchNodeStateOffline - The Compute Node is not currently running a Task, and scheduling of new Tasks to the Compute Node
// is disabled.
	BatchNodeStateOffline BatchNodeState = "offline"
	// BatchNodeStatePreempted - The Spot/Low-priority Compute Node has been preempted. Tasks which were running on the Compute
// Node when it was preempted will be rescheduled when another Compute Node becomes available.
	BatchNodeStatePreempted BatchNodeState = "preempted"
	// BatchNodeStateRebooting - The Compute Node is rebooting.
	BatchNodeStateRebooting BatchNodeState = "rebooting"
	// BatchNodeStateReimaging - The Compute Node is reimaging.
	BatchNodeStateReimaging BatchNodeState = "reimaging"
	// BatchNodeStateRunning - The Compute Node is running one or more Tasks (other than a StartTask).
	BatchNodeStateRunning BatchNodeState = "running"
	// BatchNodeStateStartTaskFailed - The StartTask has failed on the Compute Node (and exhausted all retries), and waitForSuccess
// is set. The Compute Node is not usable for running Tasks.
	BatchNodeStateStartTaskFailed BatchNodeState = "starttaskfailed"
	// BatchNodeStateStarting - The Batch service is starting on the underlying virtual machine.
	BatchNodeStateStarting BatchNodeState = "starting"
	// BatchNodeStateUnknown - The Batch service has lost contact with the Compute Node, and does not know its true state.
	BatchNodeStateUnknown BatchNodeState = "unknown"
	// BatchNodeStateUnusable - The Compute Node cannot be used for Task execution due to errors.
	BatchNodeStateUnusable BatchNodeState = "unusable"
	// BatchNodeStateUpgradingOS - The Compute Node is undergoing an OS upgrade operation.
	BatchNodeStateUpgradingOS BatchNodeState = "upgradingos"
	// BatchNodeStateWaitingForStartTask - The StartTask has started running on the Compute Node, but waitForSuccess is set and
// the StartTask has not yet completed.
	BatchNodeStateWaitingForStartTask BatchNodeState = "waitingforstarttask"
)

// PossibleBatchNodeStateValues returns the possible values for the BatchNodeState const type.
func PossibleBatchNodeStateValues() []BatchNodeState {
	return []BatchNodeState{	
		BatchNodeStateCreating,
		BatchNodeStateIdle,
		BatchNodeStateLeavingPool,
		BatchNodeStateOffline,
		BatchNodeStatePreempted,
		BatchNodeStateRebooting,
		BatchNodeStateReimaging,
		BatchNodeStateRunning,
		BatchNodeStateStartTaskFailed,
		BatchNodeStateStarting,
		BatchNodeStateUnknown,
		BatchNodeStateUnusable,
		BatchNodeStateUpgradingOS,
		BatchNodeStateWaitingForStartTask,
	}
}

// BatchPoolIdentityType - BatchPoolIdentityType enums
type BatchPoolIdentityType string

const (
	// BatchPoolIdentityTypeNone - Batch pool has no identity associated with it. Setting `None` in update pool will remove existing
// identities.
	BatchPoolIdentityTypeNone BatchPoolIdentityType = "None"
	// BatchPoolIdentityTypeUserAssigned - Batch pool has user assigned identities with it.
	BatchPoolIdentityTypeUserAssigned BatchPoolIdentityType = "UserAssigned"
)

// PossibleBatchPoolIdentityTypeValues returns the possible values for the BatchPoolIdentityType const type.
func PossibleBatchPoolIdentityTypeValues() []BatchPoolIdentityType {
	return []BatchPoolIdentityType{	
		BatchPoolIdentityTypeNone,
		BatchPoolIdentityTypeUserAssigned,
	}
}

// BatchPoolLifetimeOption - BatchPoolLifetimeOption enums
type BatchPoolLifetimeOption string

const (
	// BatchPoolLifetimeOptionJob - The Pool exists for the lifetime of the Job to which it is dedicated. The Batch service creates
// the Pool when it creates the Job. If the 'job' option is applied to a Job Schedule, the Batch service creates a new auto
// Pool for every Job created on the schedule.
	BatchPoolLifetimeOptionJob BatchPoolLifetimeOption = "job"
	// BatchPoolLifetimeOptionJobSchedule - The Pool exists for the lifetime of the Job Schedule. The Batch Service creates the
// Pool when it creates the first Job on the schedule. You may apply this option only to Job Schedules, not to Jobs.
	BatchPoolLifetimeOptionJobSchedule BatchPoolLifetimeOption = "jobschedule"
)

// PossibleBatchPoolLifetimeOptionValues returns the possible values for the BatchPoolLifetimeOption const type.
func PossibleBatchPoolLifetimeOptionValues() []BatchPoolLifetimeOption {
	return []BatchPoolLifetimeOption{	
		BatchPoolLifetimeOptionJob,
		BatchPoolLifetimeOptionJobSchedule,
	}
}

// BatchPoolState - BatchPoolState enums
type BatchPoolState string

const (
	// BatchPoolStateActive - The Pool is available to run Tasks subject to the availability of Compute Nodes.
	BatchPoolStateActive BatchPoolState = "active"
	// BatchPoolStateDeleting - The user has requested that the Pool be deleted, but the delete operation has not yet completed.
	BatchPoolStateDeleting BatchPoolState = "deleting"
)

// PossibleBatchPoolStateValues returns the possible values for the BatchPoolState const type.
func PossibleBatchPoolStateValues() []BatchPoolState {
	return []BatchPoolState{	
		BatchPoolStateActive,
		BatchPoolStateDeleting,
	}
}

// BatchStartTaskState - BatchStartTaskState enums
type BatchStartTaskState string

const (
	// BatchStartTaskStateCompleted - The StartTask has exited with exit code 0, or the StartTask has failed and the retry limit
// has reached, or the StartTask process did not run due to Task preparation errors (such as resource file download failures).
	BatchStartTaskStateCompleted BatchStartTaskState = "completed"
	// BatchStartTaskStateRunning - The StartTask is currently running.
	BatchStartTaskStateRunning BatchStartTaskState = "running"
)

// PossibleBatchStartTaskStateValues returns the possible values for the BatchStartTaskState const type.
func PossibleBatchStartTaskStateValues() []BatchStartTaskState {
	return []BatchStartTaskState{	
		BatchStartTaskStateCompleted,
		BatchStartTaskStateRunning,
	}
}

// BatchSubtaskState - BatchSubtaskState enums
type BatchSubtaskState string

const (
	// BatchSubtaskStateCompleted - The Task is no longer eligible to run, usually because the Task has finished successfully,
// or the Task has finished unsuccessfully and has exhausted its retry limit. A Task is also marked as completed if an error
// occurred launching the Task, or when the Task has been terminated.
	BatchSubtaskStateCompleted BatchSubtaskState = "completed"
	// BatchSubtaskStatePreparing - The Task has been assigned to a Compute Node, but is waiting for a required Job Preparation
// Task to complete on the Compute Node. If the Job Preparation Task succeeds, the Task will move to running. If the Job Preparation
// Task fails, the Task will return to active and will be eligible to be assigned to a different Compute Node.
	BatchSubtaskStatePreparing BatchSubtaskState = "preparing"
	// BatchSubtaskStateRunning - The Task is running on a Compute Node. This includes task-level preparation such as downloading
// resource files or deploying Packages specified on the Task - it does not necessarily mean that the Task command line has
// started executing.
	BatchSubtaskStateRunning BatchSubtaskState = "running"
)

// PossibleBatchSubtaskStateValues returns the possible values for the BatchSubtaskState const type.
func PossibleBatchSubtaskStateValues() []BatchSubtaskState {
	return []BatchSubtaskState{	
		BatchSubtaskStateCompleted,
		BatchSubtaskStatePreparing,
		BatchSubtaskStateRunning,
	}
}

// BatchTaskAddStatus - BatchTaskAddStatus enums
type BatchTaskAddStatus string

const (
	// BatchTaskAddStatusClientError - The Task failed to add due to a client error and should not be retried without modifying
// the request as appropriate.
	BatchTaskAddStatusClientError BatchTaskAddStatus = "clienterror"
	// BatchTaskAddStatusServerError - Task failed to add due to a server error and can be retried without modification.
	BatchTaskAddStatusServerError BatchTaskAddStatus = "servererror"
	// BatchTaskAddStatusSuccess - The Task was added successfully.
	BatchTaskAddStatusSuccess BatchTaskAddStatus = "success"
)

// PossibleBatchTaskAddStatusValues returns the possible values for the BatchTaskAddStatus const type.
func PossibleBatchTaskAddStatusValues() []BatchTaskAddStatus {
	return []BatchTaskAddStatus{	
		BatchTaskAddStatusClientError,
		BatchTaskAddStatusServerError,
		BatchTaskAddStatusSuccess,
	}
}

// BatchTaskExecutionResult - BatchTaskExecutionResult enums
type BatchTaskExecutionResult string

const (
	// BatchTaskExecutionResultFailure - There was an error during processing of the Task. The failure may have occurred before
// the Task process was launched, while the Task process was executing, or after the Task process exited.
	BatchTaskExecutionResultFailure BatchTaskExecutionResult = "failure"
	// BatchTaskExecutionResultSuccess - The Task ran successfully.
	BatchTaskExecutionResultSuccess BatchTaskExecutionResult = "success"
)

// PossibleBatchTaskExecutionResultValues returns the possible values for the BatchTaskExecutionResult const type.
func PossibleBatchTaskExecutionResultValues() []BatchTaskExecutionResult {
	return []BatchTaskExecutionResult{	
		BatchTaskExecutionResultFailure,
		BatchTaskExecutionResultSuccess,
	}
}

// BatchTaskState - BatchTaskState enums
type BatchTaskState string

const (
	// BatchTaskStateActive - The Task is queued and able to run, but is not currently assigned to a Compute Node. A Task enters
// this state when it is created, when it is enabled after being disabled, or when it is awaiting a retry after a failed run.
	BatchTaskStateActive BatchTaskState = "active"
	// BatchTaskStateCompleted - The Task is no longer eligible to run, usually because the Task has finished successfully, or
// the Task has finished unsuccessfully and has exhausted its retry limit. A Task is also marked as completed if an error
// occurred launching the Task, or when the Task has been terminated.
	BatchTaskStateCompleted BatchTaskState = "completed"
	// BatchTaskStatePreparing - The Task has been assigned to a Compute Node, but is waiting for a required Job Preparation Task
// to complete on the Compute Node. If the Job Preparation Task succeeds, the Task will move to running. If the Job Preparation
// Task fails, the Task will return to active and will be eligible to be assigned to a different Compute Node.
	BatchTaskStatePreparing BatchTaskState = "preparing"
	// BatchTaskStateRunning - The Task is running on a Compute Node. This includes task-level preparation such as downloading
// resource files or deploying Packages specified on the Task - it does not necessarily mean that the Task command line has
// started executing.
	BatchTaskStateRunning BatchTaskState = "running"
)

// PossibleBatchTaskStateValues returns the possible values for the BatchTaskState const type.
func PossibleBatchTaskStateValues() []BatchTaskState {
	return []BatchTaskState{	
		BatchTaskStateActive,
		BatchTaskStateCompleted,
		BatchTaskStatePreparing,
		BatchTaskStateRunning,
	}
}

// CachingType - CachingType enums
type CachingType string

const (
	// CachingTypeNone - The caching mode for the disk is not enabled.
	CachingTypeNone CachingType = "none"
	// CachingTypeReadOnly - The caching mode for the disk is read only.
	CachingTypeReadOnly CachingType = "readonly"
	// CachingTypeReadWrite - The caching mode for the disk is read and write.
	CachingTypeReadWrite CachingType = "readwrite"
)

// PossibleCachingTypeValues returns the possible values for the CachingType const type.
func PossibleCachingTypeValues() []CachingType {
	return []CachingType{	
		CachingTypeNone,
		CachingTypeReadOnly,
		CachingTypeReadWrite,
	}
}

// ContainerType - ContainerType enums
type ContainerType string

const (
	// ContainerTypeCriCompatible - A CRI based technology will be used to launch the containers.
	ContainerTypeCriCompatible ContainerType = "criCompatible"
	// ContainerTypeDockerCompatible - A Docker compatible container technology will be used to launch the containers.
	ContainerTypeDockerCompatible ContainerType = "dockerCompatible"
)

// PossibleContainerTypeValues returns the possible values for the ContainerType const type.
func PossibleContainerTypeValues() []ContainerType {
	return []ContainerType{	
		ContainerTypeCriCompatible,
		ContainerTypeDockerCompatible,
	}
}

// ContainerWorkingDirectory - ContainerWorkingDirectory enums
type ContainerWorkingDirectory string

const (
	// ContainerWorkingDirectoryContainerImageDefault - Use the working directory defined in the container Image. Beware that
// this directory will not contain the Resource Files downloaded by Batch.
	ContainerWorkingDirectoryContainerImageDefault ContainerWorkingDirectory = "containerImageDefault"
	// ContainerWorkingDirectoryTaskWorkingDirectory - Use the standard Batch service Task working directory, which will contain
// the Task Resource Files populated by Batch.
	ContainerWorkingDirectoryTaskWorkingDirectory ContainerWorkingDirectory = "taskWorkingDirectory"
)

// PossibleContainerWorkingDirectoryValues returns the possible values for the ContainerWorkingDirectory const type.
func PossibleContainerWorkingDirectoryValues() []ContainerWorkingDirectory {
	return []ContainerWorkingDirectory{	
		ContainerWorkingDirectoryContainerImageDefault,
		ContainerWorkingDirectoryTaskWorkingDirectory,
	}
}

// DependencyAction - DependencyAction enums
type DependencyAction string

const (
	// DependencyActionBlock - Blocks tasks waiting on this task, preventing them from being scheduled.
	DependencyActionBlock DependencyAction = "block"
	// DependencyActionSatisfy - Satisfy tasks waiting on this task; once all dependencies are satisfied, the task will be scheduled
// to run.
	DependencyActionSatisfy DependencyAction = "satisfy"
)

// PossibleDependencyActionValues returns the possible values for the DependencyAction const type.
func PossibleDependencyActionValues() []DependencyAction {
	return []DependencyAction{	
		DependencyActionBlock,
		DependencyActionSatisfy,
	}
}

// DiffDiskPlacement - AccessDiffDiskPlacementScope enums
type DiffDiskPlacement string

const (
	// DiffDiskPlacementCacheDisk - The Ephemeral OS Disk is stored on the VM cache.
	DiffDiskPlacementCacheDisk DiffDiskPlacement = "cachedisk"
)

// PossibleDiffDiskPlacementValues returns the possible values for the DiffDiskPlacement const type.
func PossibleDiffDiskPlacementValues() []DiffDiskPlacement {
	return []DiffDiskPlacement{	
		DiffDiskPlacementCacheDisk,
	}
}

// DisableBatchJobOption - DisableBatchJobOption enums
type DisableBatchJobOption string

const (
	// DisableBatchJobOptionRequeue - Terminate running Tasks and requeue them. The Tasks will run again when the Job is enabled.
	DisableBatchJobOptionRequeue DisableBatchJobOption = "requeue"
	// DisableBatchJobOptionTerminate - Terminate running Tasks. The Tasks will be completed with failureInfo indicating that
// they were terminated, and will not run again.
	DisableBatchJobOptionTerminate DisableBatchJobOption = "terminate"
	// DisableBatchJobOptionWait - Allow currently running Tasks to complete.
	DisableBatchJobOptionWait DisableBatchJobOption = "wait"
)

// PossibleDisableBatchJobOptionValues returns the possible values for the DisableBatchJobOption const type.
func PossibleDisableBatchJobOptionValues() []DisableBatchJobOption {
	return []DisableBatchJobOption{	
		DisableBatchJobOptionRequeue,
		DisableBatchJobOptionTerminate,
		DisableBatchJobOptionWait,
	}
}

// DiskEncryptionTarget - DiskEncryptionTarget enums
type DiskEncryptionTarget string

const (
	// DiskEncryptionTargetOsDisk - The OS Disk on the compute node is encrypted.
	DiskEncryptionTargetOsDisk DiskEncryptionTarget = "osdisk"
	// DiskEncryptionTargetTemporaryDisk - The temporary disk on the compute node is encrypted. On Linux this encryption applies
// to other partitions (such as those on mounted data disks) when encryption occurs at boot time.
	DiskEncryptionTargetTemporaryDisk DiskEncryptionTarget = "temporarydisk"
)

// PossibleDiskEncryptionTargetValues returns the possible values for the DiskEncryptionTarget const type.
func PossibleDiskEncryptionTargetValues() []DiskEncryptionTarget {
	return []DiskEncryptionTarget{	
		DiskEncryptionTargetOsDisk,
		DiskEncryptionTargetTemporaryDisk,
	}
}

// DynamicVNetAssignmentScope - DynamicVNetAssignmentScope enums
type DynamicVNetAssignmentScope string

const (
	// DynamicVNetAssignmentScopeJob - Dynamic VNet assignment is done per-job.
	DynamicVNetAssignmentScopeJob DynamicVNetAssignmentScope = "job"
	// DynamicVNetAssignmentScopeNone - No dynamic VNet assignment is enabled.
	DynamicVNetAssignmentScopeNone DynamicVNetAssignmentScope = "none"
)

// PossibleDynamicVNetAssignmentScopeValues returns the possible values for the DynamicVNetAssignmentScope const type.
func PossibleDynamicVNetAssignmentScopeValues() []DynamicVNetAssignmentScope {
	return []DynamicVNetAssignmentScope{	
		DynamicVNetAssignmentScopeJob,
		DynamicVNetAssignmentScopeNone,
	}
}

// ElevationLevel - ElevationLevel enums
type ElevationLevel string

const (
	// ElevationLevelAdmin - The user is a user with elevated access and operates with full Administrator permissions.
	ElevationLevelAdmin ElevationLevel = "admin"
	// ElevationLevelNonAdmin - The user is a standard user without elevated access.
	ElevationLevelNonAdmin ElevationLevel = "nonadmin"
)

// PossibleElevationLevelValues returns the possible values for the ElevationLevel const type.
func PossibleElevationLevelValues() []ElevationLevel {
	return []ElevationLevel{	
		ElevationLevelAdmin,
		ElevationLevelNonAdmin,
	}
}

// ErrorCategory - ErrorCategory enums
type ErrorCategory string

const (
	// ErrorCategoryServerError - The error is due to an internal server issue.
	ErrorCategoryServerError ErrorCategory = "servererror"
	// ErrorCategoryUserError - The error is due to a user issue, such as misconfiguration.
	ErrorCategoryUserError ErrorCategory = "usererror"
)

// PossibleErrorCategoryValues returns the possible values for the ErrorCategory const type.
func PossibleErrorCategoryValues() []ErrorCategory {
	return []ErrorCategory{	
		ErrorCategoryServerError,
		ErrorCategoryUserError,
	}
}

// IPAddressProvisioningType - IPAddressProvisioningType enums
type IPAddressProvisioningType string

const (
	// IPAddressProvisioningTypeBatchManaged - A public IP will be created and managed by Batch. There may be multiple public
// IPs depending on the size of the Pool.
	IPAddressProvisioningTypeBatchManaged IPAddressProvisioningType = "batchmanaged"
	// IPAddressProvisioningTypeNoPublicIPAddresses - No public IP Address will be created.
	IPAddressProvisioningTypeNoPublicIPAddresses IPAddressProvisioningType = "nopublicipaddresses"
	// IPAddressProvisioningTypeUserManaged - Public IPs are provided by the user and will be used to provision the Compute Nodes.
	IPAddressProvisioningTypeUserManaged IPAddressProvisioningType = "usermanaged"
)

// PossibleIPAddressProvisioningTypeValues returns the possible values for the IPAddressProvisioningType const type.
func PossibleIPAddressProvisioningTypeValues() []IPAddressProvisioningType {
	return []IPAddressProvisioningType{	
		IPAddressProvisioningTypeBatchManaged,
		IPAddressProvisioningTypeNoPublicIPAddresses,
		IPAddressProvisioningTypeUserManaged,
	}
}

// ImageVerificationType - ImageVerificationType enums
type ImageVerificationType string

const (
	// ImageVerificationTypeUnverified - The associated Compute Node agent SKU should have binary compatibility with the Image,
// but specific functionality has not been verified.
	ImageVerificationTypeUnverified ImageVerificationType = "unverified"
	// ImageVerificationTypeVerified - The Image is guaranteed to be compatible with the associated Compute Node agent SKU and
// all Batch features have been confirmed to work as expected.
	ImageVerificationTypeVerified ImageVerificationType = "verified"
)

// PossibleImageVerificationTypeValues returns the possible values for the ImageVerificationType const type.
func PossibleImageVerificationTypeValues() []ImageVerificationType {
	return []ImageVerificationType{	
		ImageVerificationTypeUnverified,
		ImageVerificationTypeVerified,
	}
}

// InboundEndpointProtocol - InboundEndpointProtocol enums
type InboundEndpointProtocol string

const (
	// InboundEndpointProtocolTCP - Use TCP for the endpoint.
	InboundEndpointProtocolTCP InboundEndpointProtocol = "tcp"
	// InboundEndpointProtocolUDP - Use UDP for the endpoint.
	InboundEndpointProtocolUDP InboundEndpointProtocol = "udp"
)

// PossibleInboundEndpointProtocolValues returns the possible values for the InboundEndpointProtocol const type.
func PossibleInboundEndpointProtocolValues() []InboundEndpointProtocol {
	return []InboundEndpointProtocol{	
		InboundEndpointProtocolTCP,
		InboundEndpointProtocolUDP,
	}
}

// LoginMode - LoginMode enums
type LoginMode string

const (
	// LoginModeBatch - The LOGON32_LOGON_BATCH Win32 login mode. The batch login mode is recommended for long running parallel
// processes.
	LoginModeBatch LoginMode = "batch"
	// LoginModeInteractive - The LOGON32_LOGON_INTERACTIVE Win32 login mode. UAC is enabled on Windows VirtualMachineConfiguration
// Pools. If this option is used with an elevated user identity in a Windows VirtualMachineConfiguration Pool, the user session
// will not be elevated unless the application executed by the Task command line is configured to always require administrative
// privilege or to always require maximum privilege.
	LoginModeInteractive LoginMode = "interactive"
)

// PossibleLoginModeValues returns the possible values for the LoginMode const type.
func PossibleLoginModeValues() []LoginMode {
	return []LoginMode{	
		LoginModeBatch,
		LoginModeInteractive,
	}
}

// NetworkSecurityGroupRuleAccess - NetworkSecurityGroupRuleAccess enums
type NetworkSecurityGroupRuleAccess string

const (
	// NetworkSecurityGroupRuleAccessAllow - Allow access.
	NetworkSecurityGroupRuleAccessAllow NetworkSecurityGroupRuleAccess = "allow"
	// NetworkSecurityGroupRuleAccessDeny - Deny access.
	NetworkSecurityGroupRuleAccessDeny NetworkSecurityGroupRuleAccess = "deny"
)

// PossibleNetworkSecurityGroupRuleAccessValues returns the possible values for the NetworkSecurityGroupRuleAccess const type.
func PossibleNetworkSecurityGroupRuleAccessValues() []NetworkSecurityGroupRuleAccess {
	return []NetworkSecurityGroupRuleAccess{	
		NetworkSecurityGroupRuleAccessAllow,
		NetworkSecurityGroupRuleAccessDeny,
	}
}

// OSType - OSType enums
type OSType string

const (
	// OSTypeLinux - The Linux operating system.
	OSTypeLinux OSType = "linux"
	// OSTypeWindows - The Windows operating system.
	OSTypeWindows OSType = "windows"
)

// PossibleOSTypeValues returns the possible values for the OSType const type.
func PossibleOSTypeValues() []OSType {
	return []OSType{	
		OSTypeLinux,
		OSTypeWindows,
	}
}

// OnAllBatchTasksComplete - The action the Batch service should take when all Tasks in the Job are in the completed state.
type OnAllBatchTasksComplete string

const (
	// OnAllBatchTasksCompleteNoAction - Do nothing. The Job remains active unless terminated or disabled by some other means.
	OnAllBatchTasksCompleteNoAction OnAllBatchTasksComplete = "noaction"
	// OnAllBatchTasksCompleteTerminateJob - Terminate the Job. The Job's terminationReason is set to 'AllTasksComplete'.
	OnAllBatchTasksCompleteTerminateJob OnAllBatchTasksComplete = "terminatejob"
)

// PossibleOnAllBatchTasksCompleteValues returns the possible values for the OnAllBatchTasksComplete const type.
func PossibleOnAllBatchTasksCompleteValues() []OnAllBatchTasksComplete {
	return []OnAllBatchTasksComplete{	
		OnAllBatchTasksCompleteNoAction,
		OnAllBatchTasksCompleteTerminateJob,
	}
}

// OnBatchTaskFailure - OnTaskFailure enums
type OnBatchTaskFailure string

const (
	// OnBatchTaskFailureNoAction - Do nothing. The Job remains active unless terminated or disabled by some other means.
	OnBatchTaskFailureNoAction OnBatchTaskFailure = "noaction"
	// OnBatchTaskFailurePerformExitOptionsJobAction - Terminate the Job. The Job's terminationReason is set to 'AllTasksComplete'.
	OnBatchTaskFailurePerformExitOptionsJobAction OnBatchTaskFailure = "performexitoptionsjobaction"
)

// PossibleOnBatchTaskFailureValues returns the possible values for the OnBatchTaskFailure const type.
func PossibleOnBatchTaskFailureValues() []OnBatchTaskFailure {
	return []OnBatchTaskFailure{	
		OnBatchTaskFailureNoAction,
		OnBatchTaskFailurePerformExitOptionsJobAction,
	}
}

// OutputFileUploadCondition - OutputFileUploadCondition enums
type OutputFileUploadCondition string

const (
	// OutputFileUploadConditionTaskCompletion - Upload the file(s) after the Task process exits, no matter what the exit code
// was.
	OutputFileUploadConditionTaskCompletion OutputFileUploadCondition = "taskcompletion"
	// OutputFileUploadConditionTaskFailure - Upload the file(s) only after the Task process exits with a nonzero exit code.
	OutputFileUploadConditionTaskFailure OutputFileUploadCondition = "taskfailure"
	// OutputFileUploadConditionTaskSuccess - Upload the file(s) only after the Task process exits with an exit code of 0.
	OutputFileUploadConditionTaskSuccess OutputFileUploadCondition = "tasksuccess"
)

// PossibleOutputFileUploadConditionValues returns the possible values for the OutputFileUploadCondition const type.
func PossibleOutputFileUploadConditionValues() []OutputFileUploadCondition {
	return []OutputFileUploadCondition{	
		OutputFileUploadConditionTaskCompletion,
		OutputFileUploadConditionTaskFailure,
		OutputFileUploadConditionTaskSuccess,
	}
}

// SchedulingState - SchedulingState enums
type SchedulingState string

const (
	// SchedulingStateDisabled - No new Tasks will be scheduled on the Compute Node. Tasks already running on the Compute Node
// may still run to completion. All Compute Nodes start with scheduling enabled.
	SchedulingStateDisabled SchedulingState = "disabled"
	// SchedulingStateEnabled - Tasks can be scheduled on the Compute Node.
	SchedulingStateEnabled SchedulingState = "enabled"
)

// PossibleSchedulingStateValues returns the possible values for the SchedulingState const type.
func PossibleSchedulingStateValues() []SchedulingState {
	return []SchedulingState{	
		SchedulingStateDisabled,
		SchedulingStateEnabled,
	}
}

// SecurityTypes - Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings.
type SecurityTypes string

const (
	// SecurityTypesTrustedLaunch - Trusted launch protects against advanced and persistent attack techniques.
	SecurityTypesTrustedLaunch SecurityTypes = "trustedLaunch"
)

// PossibleSecurityTypesValues returns the possible values for the SecurityTypes const type.
func PossibleSecurityTypesValues() []SecurityTypes {
	return []SecurityTypes{	
		SecurityTypesTrustedLaunch,
	}
}

// StatusLevelTypes - Level code.
type StatusLevelTypes string

const (
	// StatusLevelTypesError - Error
	StatusLevelTypesError StatusLevelTypes = "Error"
	// StatusLevelTypesInfo - Info
	StatusLevelTypesInfo StatusLevelTypes = "Info"
	// StatusLevelTypesWarning - Warning
	StatusLevelTypesWarning StatusLevelTypes = "Warning"
)

// PossibleStatusLevelTypesValues returns the possible values for the StatusLevelTypes const type.
func PossibleStatusLevelTypesValues() []StatusLevelTypes {
	return []StatusLevelTypes{	
		StatusLevelTypesError,
		StatusLevelTypesInfo,
		StatusLevelTypesWarning,
	}
}

// StorageAccountType - StorageAccountType enums
type StorageAccountType string

const (
	// StorageAccountTypePremiumLRS - The data disk should use premium locally redundant storage.
	StorageAccountTypePremiumLRS StorageAccountType = "premium_lrs"
	// StorageAccountTypeStandardLRS - The data disk should use standard locally redundant storage.
	StorageAccountTypeStandardLRS StorageAccountType = "standard_lrs"
	// StorageAccountTypeStandardSSDLRS - The data disk / OS disk should use standard SSD locally redundant storage.
	StorageAccountTypeStandardSSDLRS StorageAccountType = "standardssd_lrs"
)

// PossibleStorageAccountTypeValues returns the possible values for the StorageAccountType const type.
func PossibleStorageAccountTypeValues() []StorageAccountType {
	return []StorageAccountType{	
		StorageAccountTypePremiumLRS,
		StorageAccountTypeStandardLRS,
		StorageAccountTypeStandardSSDLRS,
	}
}

// UpgradeMode - UpgradeMode enums
type UpgradeMode string

const (
	// UpgradeModeAutomatic - TAll virtual machines in the scale set are automatically updated at the same time.
	UpgradeModeAutomatic UpgradeMode = "automatic"
	// UpgradeModeManual - You control the application of updates to virtual machines in the scale set. You do this by using the
// manualUpgrade action.
	UpgradeModeManual UpgradeMode = "manual"
	// UpgradeModeRolling - The existing instances in a scale set are brought down in batches to be upgraded. Once the upgraded
// batch is complete, the instances will begin taking traffic again and the next batch will begin. This continues until all
// instances brought up-to-date.
	UpgradeModeRolling UpgradeMode = "rolling"
)

// PossibleUpgradeModeValues returns the possible values for the UpgradeMode const type.
func PossibleUpgradeModeValues() []UpgradeMode {
	return []UpgradeMode{	
		UpgradeModeAutomatic,
		UpgradeModeManual,
		UpgradeModeRolling,
	}
}

