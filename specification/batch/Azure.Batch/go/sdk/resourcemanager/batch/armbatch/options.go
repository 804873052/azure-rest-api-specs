// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armbatch

import "time"

// BatchApiClientCancelCertificateDeletionOptions contains the optional parameters for the BatchApiClient.CancelCertificateDeletion
// method.
type BatchApiClientCancelCertificateDeletionOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientCreateCertificateOptions contains the optional parameters for the BatchApiClient.CreateCertificate method.
type BatchApiClientCreateCertificateOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientCreateJobOptions contains the optional parameters for the BatchApiClient.CreateJob method.
type BatchApiClientCreateJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientCreateJobScheduleOptions contains the optional parameters for the BatchApiClient.CreateJobSchedule method.
type BatchApiClientCreateJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientCreateNodeUserOptions contains the optional parameters for the BatchApiClient.CreateNodeUser method.
type BatchApiClientCreateNodeUserOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientCreatePoolOptions contains the optional parameters for the BatchApiClient.CreatePool method.
type BatchApiClientCreatePoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientCreateTaskCollectionOptions contains the optional parameters for the BatchApiClient.CreateTaskCollection
// method.
type BatchApiClientCreateTaskCollectionOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientCreateTaskOptions contains the optional parameters for the BatchApiClient.CreateTask method.
type BatchApiClientCreateTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDeleteCertificateOptions contains the optional parameters for the BatchApiClient.DeleteCertificate method.
type BatchApiClientDeleteCertificateOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDeleteJobOptions contains the optional parameters for the BatchApiClient.DeleteJob method.
type BatchApiClientDeleteJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDeleteJobScheduleOptions contains the optional parameters for the BatchApiClient.DeleteJobSchedule method.
type BatchApiClientDeleteJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDeleteNodeFileOptions contains the optional parameters for the BatchApiClient.DeleteNodeFile method.
type BatchApiClientDeleteNodeFileOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether to delete children of a directory. If the filePath parameter represents
// a directory instead of a file, you can set recursive to true to delete the
// directory and all of the files and subdirectories in it. If recursive is false
// then the directory must be empty or deletion will fail.
	Recursive *bool

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDeleteNodeUserOptions contains the optional parameters for the BatchApiClient.DeleteNodeUser method.
type BatchApiClientDeleteNodeUserOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDeletePoolOptions contains the optional parameters for the BatchApiClient.DeletePool method.
type BatchApiClientDeletePoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDeleteTaskFileOptions contains the optional parameters for the BatchApiClient.DeleteTaskFile method.
type BatchApiClientDeleteTaskFileOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether to delete children of a directory. If the filePath parameter represents
// a directory instead of a file, you can set recursive to true to delete the
// directory and all of the files and subdirectories in it. If recursive is false
// then the directory must be empty or deletion will fail.
	Recursive *bool

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDeleteTaskOptions contains the optional parameters for the BatchApiClient.DeleteTask method.
type BatchApiClientDeleteTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDisableJobOptions contains the optional parameters for the BatchApiClient.DisableJob method.
type BatchApiClientDisableJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDisableJobScheduleOptions contains the optional parameters for the BatchApiClient.DisableJobSchedule method.
type BatchApiClientDisableJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDisableNodeSchedulingOptions contains the optional parameters for the BatchApiClient.DisableNodeScheduling
// method.
type BatchApiClientDisableNodeSchedulingOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// The options to use for disabling scheduling on the Compute Node.
	Parameters *BatchNodeDisableSchedulingContent

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientDisablePoolAutoScaleOptions contains the optional parameters for the BatchApiClient.DisablePoolAutoScale
// method.
type BatchApiClientDisablePoolAutoScaleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientEnableJobOptions contains the optional parameters for the BatchApiClient.EnableJob method.
type BatchApiClientEnableJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientEnableJobScheduleOptions contains the optional parameters for the BatchApiClient.EnableJobSchedule method.
type BatchApiClientEnableJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientEnableNodeSchedulingOptions contains the optional parameters for the BatchApiClient.EnableNodeScheduling
// method.
type BatchApiClientEnableNodeSchedulingOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientEnablePoolAutoScaleOptions contains the optional parameters for the BatchApiClient.EnablePoolAutoScale method.
type BatchApiClientEnablePoolAutoScaleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientEvaluatePoolAutoScaleOptions contains the optional parameters for the BatchApiClient.EvaluatePoolAutoScale
// method.
type BatchApiClientEvaluatePoolAutoScaleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetApplicationOptions contains the optional parameters for the BatchApiClient.GetApplication method.
type BatchApiClientGetApplicationOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetCertificateOptions contains the optional parameters for the BatchApiClient.GetCertificate method.
type BatchApiClientGetCertificateOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetJobOptions contains the optional parameters for the BatchApiClient.GetJob method.
type BatchApiClientGetJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetJobScheduleOptions contains the optional parameters for the BatchApiClient.GetJobSchedule method.
type BatchApiClientGetJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetJobTaskCountsOptions contains the optional parameters for the BatchApiClient.GetJobTaskCounts method.
type BatchApiClientGetJobTaskCountsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetNodeExtensionOptions contains the optional parameters for the BatchApiClient.GetNodeExtension method.
type BatchApiClientGetNodeExtensionOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetNodeFileOptions contains the optional parameters for the BatchApiClient.GetNodeFile method.
type BatchApiClientGetNodeFileOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The byte range to be retrieved. The default is to retrieve the entire file. The
// format is bytes=startRange-endRange.
	OcpRange *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetNodeFilePropertiesOptions contains the optional parameters for the BatchApiClient.GetNodeFileProperties
// method.
type BatchApiClientGetNodeFilePropertiesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetNodeOptions contains the optional parameters for the BatchApiClient.GetNode method.
type BatchApiClientGetNodeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetNodeRemoteDesktopFileOptions contains the optional parameters for the BatchApiClient.GetNodeRemoteDesktopFile
// method.
type BatchApiClientGetNodeRemoteDesktopFileOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetNodeRemoteLoginSettingsOptions contains the optional parameters for the BatchApiClient.GetNodeRemoteLoginSettings
// method.
type BatchApiClientGetNodeRemoteLoginSettingsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetPoolOptions contains the optional parameters for the BatchApiClient.GetPool method.
type BatchApiClientGetPoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetTaskFileOptions contains the optional parameters for the BatchApiClient.GetTaskFile method.
type BatchApiClientGetTaskFileOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The byte range to be retrieved. The default is to retrieve the entire file. The
// format is bytes=startRange-endRange.
	OcpRange *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetTaskFilePropertiesOptions contains the optional parameters for the BatchApiClient.GetTaskFileProperties
// method.
type BatchApiClientGetTaskFilePropertiesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientGetTaskOptions contains the optional parameters for the BatchApiClient.GetTask method.
type BatchApiClientGetTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientJobScheduleExistsOptions contains the optional parameters for the BatchApiClient.JobScheduleExists method.
type BatchApiClientJobScheduleExistsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListApplicationsOptions contains the optional parameters for the BatchApiClient.NewListApplicationsPager
// method.
type BatchApiClientListApplicationsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListCertificatesOptions contains the optional parameters for the BatchApiClient.NewListCertificatesPager
// method.
type BatchApiClientListCertificatesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListJobPreparationAndReleaseTaskStatusOptions contains the optional parameters for the BatchApiClient.NewListJobPreparationAndReleaseTaskStatusPager
// method.
type BatchApiClientListJobPreparationAndReleaseTaskStatusOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListJobSchedulesOptions contains the optional parameters for the BatchApiClient.NewListJobSchedulesPager
// method.
type BatchApiClientListJobSchedulesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListJobsFromScheduleOptions contains the optional parameters for the BatchApiClient.NewListJobsFromSchedulePager
// method.
type BatchApiClientListJobsFromScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListJobsOptions contains the optional parameters for the BatchApiClient.NewListJobsPager method.
type BatchApiClientListJobsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListNodeExtensionsOptions contains the optional parameters for the BatchApiClient.NewListNodeExtensionsPager
// method.
type BatchApiClientListNodeExtensionsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListNodeFilesOptions contains the optional parameters for the BatchApiClient.NewListNodeFilesPager method.
type BatchApiClientListNodeFilesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether to list children of a directory.
	Recursive *bool

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListNodesOptions contains the optional parameters for the BatchApiClient.NewListNodesPager method.
type BatchApiClientListNodesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListPoolNodeCountsOptions contains the optional parameters for the BatchApiClient.NewListPoolNodeCountsPager
// method.
type BatchApiClientListPoolNodeCountsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-support-images.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListPoolUsageMetricsOptions contains the optional parameters for the BatchApiClient.NewListPoolUsageMetricsPager
// method.
type BatchApiClientListPoolUsageMetricsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The latest time from which to include metrics. This must be at least two hours
// before the current time. If not specified this defaults to the end time of the
// last aggregation interval currently available.
	Endtime *time.Time

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The earliest time from which to include metrics. This must be at least two and
// a half hours before the current time. If not specified this defaults to the
// start time of the last aggregation interval currently available.
	Starttime *time.Time

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListPoolsOptions contains the optional parameters for the BatchApiClient.NewListPoolsPager method.
type BatchApiClientListPoolsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListSubTasksOptions contains the optional parameters for the BatchApiClient.NewListSubTasksPager method.
type BatchApiClientListSubTasksOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListSupportedImagesOptions contains the optional parameters for the BatchApiClient.NewListSupportedImagesPager
// method.
type BatchApiClientListSupportedImagesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-support-images.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListTaskFilesOptions contains the optional parameters for the BatchApiClient.NewListTaskFilesPager method.
type BatchApiClientListTaskFilesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether to list children of the Task directory. This parameter can be used in
// combination with the filter parameter to list specific type of files.
	Recursive *bool

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientListTasksOptions contains the optional parameters for the BatchApiClient.NewListTasksPager method.
type BatchApiClientListTasksOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An OData $expand clause.
	Expand []string

	// An OData $filter clause. For more information on constructing this filter, see
// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.
	Filter *string

	// The maximum number of items to return in the response. A maximum of 1000
// applications can be returned.
	Maxresults *int32

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// An OData $select clause.
	SelectParam []string

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientPoolExistsOptions contains the optional parameters for the BatchApiClient.PoolExists method.
type BatchApiClientPoolExistsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientReactivateTaskOptions contains the optional parameters for the BatchApiClient.ReactivateTask method.
type BatchApiClientReactivateTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientRebootNodeOptions contains the optional parameters for the BatchApiClient.RebootNode method.
type BatchApiClientRebootNodeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// The options to use for rebooting the Compute Node.
	Parameters *BatchNodeRebootContent

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientReimageNodeOptions contains the optional parameters for the BatchApiClient.ReimageNode method.
type BatchApiClientReimageNodeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// The options to use for reimaging the Compute Node.
	Parameters *BatchNodeReimageContent

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientRemoveNodesOptions contains the optional parameters for the BatchApiClient.RemoveNodes method.
type BatchApiClientRemoveNodesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientReplaceJobOptions contains the optional parameters for the BatchApiClient.ReplaceJob method.
type BatchApiClientReplaceJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientReplaceJobScheduleOptions contains the optional parameters for the BatchApiClient.ReplaceJobSchedule method.
type BatchApiClientReplaceJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientReplaceNodeUserOptions contains the optional parameters for the BatchApiClient.ReplaceNodeUser method.
type BatchApiClientReplaceNodeUserOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientReplacePoolPropertiesOptions contains the optional parameters for the BatchApiClient.ReplacePoolProperties
// method.
type BatchApiClientReplacePoolPropertiesOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientReplaceTaskOptions contains the optional parameters for the BatchApiClient.ReplaceTask method.
type BatchApiClientReplaceTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientResizePoolOptions contains the optional parameters for the BatchApiClient.ResizePool method.
type BatchApiClientResizePoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientStopPoolResizeOptions contains the optional parameters for the BatchApiClient.StopPoolResize method.
type BatchApiClientStopPoolResizeOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientTerminateJobOptions contains the optional parameters for the BatchApiClient.TerminateJob method.
type BatchApiClientTerminateJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// The options to use for terminating the Job.
	Parameters *BatchJobTerminateContent

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientTerminateJobScheduleOptions contains the optional parameters for the BatchApiClient.TerminateJobSchedule
// method.
type BatchApiClientTerminateJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientTerminateTaskOptions contains the optional parameters for the BatchApiClient.TerminateTask method.
type BatchApiClientTerminateTaskOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientUpdateJobOptions contains the optional parameters for the BatchApiClient.UpdateJob method.
type BatchApiClientUpdateJobOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientUpdateJobScheduleOptions contains the optional parameters for the BatchApiClient.UpdateJobSchedule method.
type BatchApiClientUpdateJobScheduleOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientUpdatePoolOptions contains the optional parameters for the BatchApiClient.UpdatePool method.
type BatchApiClientUpdatePoolOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service exactly matches the value specified by the client.
	IfMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// been modified since the specified time.
	IfModifiedSince *time.Time

	// An ETag value associated with the version of the resource known to the client.
// The operation will be performed only if the resource's current ETag on the
// service does not match the value specified by the client.
	IfNoneMatch *string

	// A timestamp indicating the last modified time of the resource known to the
// client. The operation will be performed only if the resource on the service has
// not been modified since the specified time.
	IfUnmodifiedSince *time.Time

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

// BatchApiClientUploadNodeLogsOptions contains the optional parameters for the BatchApiClient.UploadNodeLogs method.
type BatchApiClientUploadNodeLogsOptions struct {
	// The caller-generated request identity, in the form of a GUID with no decoration
// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
	ClientRequestID *string

	// The time the request was issued. Client libraries typically set this to the
// current system clock time; set it explicitly if you are calling the REST API
// directly.
	Ocpdate *time.Time

	// Whether the server should return the client-request-id in the response.
	ReturnClientRequestID *bool

	// The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value
// is larger than 30, the default will be used instead.".
	TimeOutInSeconds *int32
}

