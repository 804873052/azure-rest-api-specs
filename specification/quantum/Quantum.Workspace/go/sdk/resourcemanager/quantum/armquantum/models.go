// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armquantum

import "time"

// The details (name and container) of the blob to store or download data.
type BlobDetails struct {
	// REQUIRED; The container name.
	ContainerName *string

	// The blob name.
	BlobName *string
}

// The job cost billed by the provider. The final cost on your bill might be slightly different due to added taxes and currency
// conversion rates.
type CostEstimate struct {
	// REQUIRED; The currency code.
	CurrencyCode *string

	// REQUIRED; The estimated total.
	EstimatedTotal *float32

	// List of usage events.
	Events []*UsageEvent
}

// The error object.
type Error struct {
	// REQUIRED; One of a server-defined set of error codes.
	Code *string

	// REQUIRED; A human-readable representation of the error.
	Message *string

	// An array of details about specific errors that led to this reported error.
	Details []*Error

	// An object containing more specific information than the current object about the error.
	Innererror *InnerError

	// The target of the error.
	Target *string
}

// An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
type InnerError struct {
	// One of a server-defined set of error codes.
	Code *string

	// Inner error.
	Innererror *InnerError
}

// A workspace item.
type ItemDetails struct {
	// REQUIRED; Id of the item.
	ID *string

	// REQUIRED; Type of the Quantum Workspace item
	ItemType *ItemType

	// REQUIRED; The name of the item. It is not required for the name to be unique and it's only used for display purposes.
	Name *string

	// REQUIRED; The unique identifier for the provider.
	ProviderID *string

	// REQUIRED; The target identifier to run the job.
	Target *string

	// The time when the item began execution.
	BeginExecutionTime *time.Time

	// Cost estimate.
	CostEstimate *CostEstimate

	// The creation time of the item.
	CreationTime *time.Time

	// The time when the item finished execution.
	EndExecutionTime *time.Time

	// Error information.
	ErrorData *WorkspaceItemError
}

// GetItemDetails implements the ItemDetailsClassification interface for type ItemDetails.
func (i *ItemDetails) GetItemDetails() *ItemDetails { return i }

// A JSONPatch object as defined by RFC 6902.
type JSONPatchObject struct {
	// REQUIRED; The operation to be performed.
	Operation *JSONPatchOperation

	// REQUIRED; A JSON-Pointer.
	Path *string

	// Optional field used in copy and move operations.
	From *string

	// A value to be used in the operation on the path.
	Value *JSONPatchObjectValue
}

type JSONPatchObjectValue struct {
}

// A job to be run in the workspace.
type JobDetails struct {
	// REQUIRED; The blob container SAS uri, the container is used to host job data.
	ContainerURI *string

	// REQUIRED; Id of the job.
	ID *string

	// CONSTANT; Type of the Quantum Workspace item is Job.
// Field has constant value ItemTypeJob, any specified value is ignored.
	ItemType *ItemType

	// REQUIRED; The name of the item. It is not required for the name to be unique and it's only used for display purposes.
	Name *string

	// REQUIRED; The unique identifier for the provider.
	ProviderID *string

	// REQUIRED; The target identifier to run the job.
	Target *string

	// The time when the item began execution.
	BeginExecutionTime *time.Time

	// The time when a job was successfully cancelled.
	CancellationTime *time.Time

	// Cost estimate.
	CostEstimate *CostEstimate

	// The creation time of the item.
	CreationTime *time.Time

	// The time when the item finished execution.
	EndExecutionTime *time.Time

	// Error information.
	ErrorData *WorkspaceItemError

	// The format of the input data.
	InputDataFormat *string

	// The input blob URI, if specified, it will override the default input blob in the container.
	InputDataURI *string

	// The input parameters for the job. JSON object used by the target solver. It is expected that the size of this object is
// small and only used to specify parameters for the execution target, not the input data.
	InputParams *JobDetailsInputParams

	// The type of job.
	JobType *JobType

	// The job metadata. Metadata provides client the ability to store client-specific information
	Metadata *JobDetailsMetadata

	// The format of the output data.
	OutputDataFormat *string

	// The output blob uri. When a job finishes successfully, results will be uploaded to this blob.
	OutputDataURI *string

	// Quantum computing data.
	QuantumComputingData *QuantumComputingData

	// The ID of the session that the job is part of.
	SessionID *string

	// The status of the job.
	Status *JobStatus

	// List of user-supplied tags associated with the job.
	Tags []*string
}

// GetItemDetails implements the ItemDetailsClassification interface for type JobDetails.
func (j *JobDetails) GetItemDetails() *ItemDetails {
	return &ItemDetails{
		BeginExecutionTime: j.BeginExecutionTime,
		CostEstimate: j.CostEstimate,
		CreationTime: j.CreationTime,
		EndExecutionTime: j.EndExecutionTime,
		ErrorData: j.ErrorData,
		ID: j.ID,
		ItemType: j.ItemType,
		Name: j.Name,
		ProviderID: j.ProviderID,
		Target: j.Target,
	}
}

type JobDetailsInputParams struct {
}

type JobDetailsMetadata struct {
}

// Paged collection of ItemDetails items
type PagedItemDetails struct {
	// REQUIRED; The ItemDetails items on this page
	Value []ItemDetailsClassification

	// The link to the next page of items
	NextLink *string
}

// Paged collection of JobDetails items
type PagedJobDetails struct {
	// REQUIRED; The JobDetails items on this page
	Value []*JobDetails

	// The link to the next page of items
	NextLink *string
}

// Paged collection of ProviderStatus items
type PagedProviderStatus struct {
	// REQUIRED; The ProviderStatus items on this page
	Value []*ProviderStatus

	// The link to the next page of items
	NextLink *string
}

// Paged collection of Quota items
type PagedQuota struct {
	// REQUIRED; The Quota items on this page
	Value []*Quota

	// The link to the next page of items
	NextLink *string
}

// Paged collection of SessionDetails items
type PagedSessionDetails struct {
	// REQUIRED; The SessionDetails items on this page
	Value []*SessionDetails

	// The link to the next page of items
	NextLink *string
}

// Provider status.
type ProviderStatus struct {
	// REQUIRED; Current provider availability.
	CurrentAvailability *ProviderAvailability

	// REQUIRED; Provider id.
	ID *string

	// REQUIRED; Current target statuses.
	Targets []*TargetStatus
}

// Quantum computing data.
type QuantumComputingData struct {
	// REQUIRED; The number of quantum computing items in the job.
	Count *int64
}

// Quota information.
type Quota struct {
	// REQUIRED; The name of the dimension associated with the quota.
	Dimension *string

	// REQUIRED; The amount of the usage that has been reserved but not applied for the current period.
	Holds *float32

	// REQUIRED; The maximum amount of usage allowed for the current period.
	Limit *float32

	// REQUIRED; The time period in which the quota's underlying meter is accumulated. Based on calendar year. 'None' is used
// for concurrent quotas.
	Period *MeterPeriod

	// REQUIRED; The unique identifier for the provider.
	ProviderID *string

	// REQUIRED; The scope at which the quota is applied.
	Scope *DimensionScope

	// REQUIRED; The amount of the usage that has been applied for the current period.
	Utilization *float32
}

// SAS URI operation response.
type SasURIResponse struct {
	// REQUIRED; A URL with a SAS token to upload a blob for execution in the given workspace.
	SasURI *string
}

// Session, a logical grouping of jobs.
type SessionDetails struct {
	// REQUIRED; Id of the session.
	ID *string

	// CONSTANT; Type of the Quantum Workspace item is Session.
// Field has constant value ItemTypeSession, any specified value is ignored.
	ItemType *ItemType

	// REQUIRED; Policy controlling the behavior of the Session when a job in the session fails.
	JobFailurePolicy *SessionJobFailurePolicy

	// REQUIRED; The name of the item. It is not required for the name to be unique and it's only used for display purposes.
	Name *string

	// REQUIRED; The unique identifier for the provider.
	ProviderID *string

	// REQUIRED; The target identifier to run the job.
	Target *string

	// The time when the item began execution.
	BeginExecutionTime *time.Time

	// Cost estimate.
	CostEstimate *CostEstimate

	// The creation time of the item.
	CreationTime *time.Time

	// The time when the item finished execution.
	EndExecutionTime *time.Time

	// Error information.
	ErrorData *WorkspaceItemError

	// The status of the session.
	Status *SessionStatus
}

// GetItemDetails implements the ItemDetailsClassification interface for type SessionDetails.
func (s *SessionDetails) GetItemDetails() *ItemDetails {
	return &ItemDetails{
		BeginExecutionTime: s.BeginExecutionTime,
		CostEstimate: s.CostEstimate,
		CreationTime: s.CreationTime,
		EndExecutionTime: s.EndExecutionTime,
		ErrorData: s.ErrorData,
		ID: s.ID,
		ItemType: s.ItemType,
		Name: s.Name,
		ProviderID: s.ProviderID,
		Target: s.Target,
	}
}

// Target status.
type TargetStatus struct {
	// REQUIRED; Average queue time in seconds.
	AverageQueueTime *int64

	// REQUIRED; Current target availability.
	CurrentAvailability *TargetAvailability

	// REQUIRED; Target id.
	ID *string

	// A page with detailed status of the provider.
	StatusPage *string
}

// Usage event details.
type UsageEvent struct {
	// REQUIRED; The amount billed.
	AmountBilled *float32

	// REQUIRED; The amount consumed.
	AmountConsumed *float32

	// REQUIRED; The dimension id.
	DimensionID *string

	// REQUIRED; The dimension name.
	DimensionName *string

	// REQUIRED; The unit of measure.
	MeasureUnit *string

	// REQUIRED; The unit price.
	UnitPrice *float32
}

// The error object.
type WorkspaceItemError struct {
	// REQUIRED; One of a server-defined set of error codes.
	Code *string

	// REQUIRED; A human-readable representation of the error.
	Message *string

	// An array of details about specific errors that led to this reported error.
	Details []*Error

	// An object containing more specific information than the current object about the error.
	Innererror *InnerError

	// The target of the error.
	Target *string
}

