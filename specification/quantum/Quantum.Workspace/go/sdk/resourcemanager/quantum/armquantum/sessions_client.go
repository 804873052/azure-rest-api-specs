// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armquantum

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// SessionsClient contains the methods for the Quantum.Workspace.Services namespace.
// Don't use this type directly, use [ServicesClient.NewSessionsClient] instead.
type SessionsClient struct {
	internal *azcore.Client
	region string
	serviceBaseUrl string
}

// Close - Close an existing session.
//   - subscriptionID - The Azure subscription ID.
//   - resourceGroupName - Name of the Azure resource group.
//   - workspaceName - Name of the Azure Quantum workspace.
//   - sessionID - Id of the session.
//   - options - SessionsClientCloseOptions contains the optional parameters for the SessionsClient.Close method.
func (client *SessionsClient) Close(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, sessionID string, options *SessionsClientCloseOptions) (SessionsClientCloseResponse, error) {
	var err error
	req, err := client.closeCreateRequest(ctx, subscriptionID, resourceGroupName, workspaceName, sessionID, options)
	if err != nil {
		return SessionsClientCloseResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SessionsClientCloseResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SessionsClientCloseResponse{}, err
	}
	resp, err := client.closeHandleResponse(httpResp)
	return resp, err
}

// closeCreateRequest creates the Close request.
func (client *SessionsClient) closeCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, sessionID string, options *SessionsClientCloseOptions) (*policy.Request, error) {
	host := "https://{region}.{serviceBaseUrl}"
	host = strings.ReplaceAll(host, "{region}", client.region)
	host = strings.ReplaceAll(host, "{serviceBaseUrl}", client.serviceBaseUrl)
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}:close"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if sessionID == "" {
		return nil, errors.New("parameter sessionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(sessionID))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// closeHandleResponse handles the Close response.
func (client *SessionsClient) closeHandleResponse(resp *http.Response) (SessionsClientCloseResponse, error) {
	result := SessionsClientCloseResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return SessionsClientCloseResponse{}, err
	}
	return result, nil
}

// Get - Get Session by its id.
//   - subscriptionID - The Azure subscription ID.
//   - resourceGroupName - Name of the Azure resource group.
//   - workspaceName - Name of the Azure Quantum workspace.
//   - sessionID - Id of the session.
//   - options - SessionsClientGetOptions contains the optional parameters for the SessionsClient.Get method.
func (client *SessionsClient) Get(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, sessionID string, options *SessionsClientGetOptions) (SessionsClientGetResponse, error) {
	var err error
	req, err := client.getCreateRequest(ctx, subscriptionID, resourceGroupName, workspaceName, sessionID, options)
	if err != nil {
		return SessionsClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SessionsClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SessionsClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SessionsClient) getCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, sessionID string, options *SessionsClientGetOptions) (*policy.Request, error) {
	host := "https://{region}.{serviceBaseUrl}"
	host = strings.ReplaceAll(host, "{region}", client.region)
	host = strings.ReplaceAll(host, "{serviceBaseUrl}", client.serviceBaseUrl)
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if sessionID == "" {
		return nil, errors.New("parameter sessionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(sessionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SessionsClient) getHandleResponse(resp *http.Response) (SessionsClientGetResponse, error) {
	result := SessionsClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return SessionsClientGetResponse{}, err
	}
	return result, nil
}

// NewJobsListPager - List jobs in a session.
//   - subscriptionID - The Azure subscription ID.
//   - resourceGroupName - Name of the Azure resource group.
//   - workspaceName - Name of the Azure Quantum workspace.
//   - sessionID - Id of the session to list jobs from.
//   - options - SessionsClientJobsListOptions contains the optional parameters for the SessionsClient.NewJobsListPager method.
func (client *SessionsClient) NewJobsListPager(subscriptionID string, resourceGroupName string, workspaceName string, sessionID string, options *SessionsClientJobsListOptions) (*runtime.Pager[SessionsClientJobsListResponse]) {
	return runtime.NewPager(runtime.PagingHandler[SessionsClientJobsListResponse]{
		More: func(page SessionsClientJobsListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SessionsClientJobsListResponse) (SessionsClientJobsListResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.jobsListCreateRequest(ctx, subscriptionID, resourceGroupName, workspaceName, sessionID, options)
			}, nil)
			if err != nil {
				return SessionsClientJobsListResponse{}, err
			}
			return client.jobsListHandleResponse(resp)
			},
	})
}

// jobsListCreateRequest creates the JobsList request.
func (client *SessionsClient) jobsListCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, sessionID string, options *SessionsClientJobsListOptions) (*policy.Request, error) {
	host := "https://{region}.{serviceBaseUrl}"
	host = strings.ReplaceAll(host, "{region}", client.region)
	host = strings.ReplaceAll(host, "{serviceBaseUrl}", client.serviceBaseUrl)
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}/jobs"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if sessionID == "" {
		return nil, errors.New("parameter sessionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(sessionID))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// jobsListHandleResponse handles the JobsList response.
func (client *SessionsClient) jobsListHandleResponse(resp *http.Response) (SessionsClientJobsListResponse, error) {
	result := SessionsClientJobsListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedJobDetails); err != nil {
		return SessionsClientJobsListResponse{}, err
	}
	return result, nil
}

// NewListPager - List all Sessions.
//   - subscriptionID - The Azure subscription ID.
//   - resourceGroupName - Name of the Azure resource group.
//   - workspaceName - Name of the Azure Quantum workspace.
//   - options - SessionsClientListOptions contains the optional parameters for the SessionsClient.NewListPager method.
func (client *SessionsClient) NewListPager(subscriptionID string, resourceGroupName string, workspaceName string, options *SessionsClientListOptions) (*runtime.Pager[SessionsClientListResponse]) {
	return runtime.NewPager(runtime.PagingHandler[SessionsClientListResponse]{
		More: func(page SessionsClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SessionsClientListResponse) (SessionsClientListResponse, error) {
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, subscriptionID, resourceGroupName, workspaceName, options)
			}, nil)
			if err != nil {
				return SessionsClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
			},
	})
}

// listCreateRequest creates the List request.
func (client *SessionsClient) listCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, options *SessionsClientListOptions) (*policy.Request, error) {
	host := "https://{region}.{serviceBaseUrl}"
	host = strings.ReplaceAll(host, "{region}", client.region)
	host = strings.ReplaceAll(host, "{serviceBaseUrl}", client.serviceBaseUrl)
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SessionsClient) listHandleResponse(resp *http.Response) (SessionsClientListResponse, error) {
	result := SessionsClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.PagedSessionDetails); err != nil {
		return SessionsClientListResponse{}, err
	}
	return result, nil
}

// Open - Open a new session.
//   - subscriptionID - The Azure subscription ID.
//   - resourceGroupName - Name of the Azure resource group.
//   - workspaceName - Name of the Azure Quantum workspace.
//   - sessionID - Id of the session.
//   - resource - The resource instance.
//   - options - SessionsClientOpenOptions contains the optional parameters for the SessionsClient.Open method.
func (client *SessionsClient) Open(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, sessionID string, resource SessionDetails, options *SessionsClientOpenOptions) (SessionsClientOpenResponse, error) {
	var err error
	req, err := client.openCreateRequest(ctx, subscriptionID, resourceGroupName, workspaceName, sessionID, resource, options)
	if err != nil {
		return SessionsClientOpenResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SessionsClientOpenResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SessionsClientOpenResponse{}, err
	}
	resp, err := client.openHandleResponse(httpResp)
	return resp, err
}

// openCreateRequest creates the Open request.
func (client *SessionsClient) openCreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, sessionID string, resource SessionDetails, options *SessionsClientOpenOptions) (*policy.Request, error) {
	host := "https://{region}.{serviceBaseUrl}"
	host = strings.ReplaceAll(host, "{region}", client.region)
	host = strings.ReplaceAll(host, "{serviceBaseUrl}", client.serviceBaseUrl)
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/sessions/{sessionId}"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	if sessionID == "" {
		return nil, errors.New("parameter sessionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{sessionId}", url.PathEscape(sessionID))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, resource); err != nil {
	return nil, err
}
	return req, nil
}

// openHandleResponse handles the Open response.
func (client *SessionsClient) openHandleResponse(resp *http.Response) (SessionsClientOpenResponse, error) {
	result := SessionsClientOpenResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result); err != nil {
		return SessionsClientOpenResponse{}, err
	}
	return result, nil
}

