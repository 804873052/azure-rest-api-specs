// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armquantum

// DimensionScope - The scope at which the quota is applied to.
type DimensionScope string

const (
	// DimensionScopeSubscription - The quota is applied to the Azure Subscription.
	DimensionScopeSubscription DimensionScope = "Subscription"
	// DimensionScopeWorkspace - The quota is applied to the Quantum Workspace.
	DimensionScopeWorkspace DimensionScope = "Workspace"
)

// PossibleDimensionScopeValues returns the possible values for the DimensionScope const type.
func PossibleDimensionScopeValues() []DimensionScope {
	return []DimensionScope{	
		DimensionScopeSubscription,
		DimensionScopeWorkspace,
	}
}

// ItemType - The type of the workspace item.
type ItemType string

const (
	// ItemTypeJob - A program, problem, or application submitted for processing.
	ItemTypeJob ItemType = "Job"
	// ItemTypeSession - A logical grouping of jobs.
	ItemTypeSession ItemType = "Session"
)

// PossibleItemTypeValues returns the possible values for the ItemType const type.
func PossibleItemTypeValues() []ItemType {
	return []ItemType{	
		ItemTypeJob,
		ItemTypeSession,
	}
}

// JSONPatchOperation - The operation to be performed.
type JSONPatchOperation string

const (
	// JSONPatchOperationAdd - Add value operation.
	JSONPatchOperationAdd JSONPatchOperation = "add"
	// JSONPatchOperationCopy - Copy value operation.
	JSONPatchOperationCopy JSONPatchOperation = "copy"
	// JSONPatchOperationMove - Move value operation.
	JSONPatchOperationMove JSONPatchOperation = "move"
	// JSONPatchOperationRemove - Remove value operation.
	JSONPatchOperationRemove JSONPatchOperation = "remove"
	// JSONPatchOperationReplace - Replace value operation.
	JSONPatchOperationReplace JSONPatchOperation = "replace"
	// JSONPatchOperationTest - Test value operation.
	JSONPatchOperationTest JSONPatchOperation = "test"
)

// PossibleJSONPatchOperationValues returns the possible values for the JSONPatchOperation const type.
func PossibleJSONPatchOperationValues() []JSONPatchOperation {
	return []JSONPatchOperation{	
		JSONPatchOperationAdd,
		JSONPatchOperationCopy,
		JSONPatchOperationMove,
		JSONPatchOperationRemove,
		JSONPatchOperationReplace,
		JSONPatchOperationTest,
	}
}

// JobStatus - The status of the job.
type JobStatus string

const (
	// JobStatusCancelled - The job was cancelled.
	JobStatusCancelled JobStatus = "Cancelled"
	// JobStatusExecuting - The job is being executed.
	JobStatusExecuting JobStatus = "Executing"
	// JobStatusFailed - The job completed with failure.
	JobStatusFailed JobStatus = "Failed"
	// JobStatusSucceeded - The job completed with success.
	JobStatusSucceeded JobStatus = "Succeeded"
	// JobStatusWaiting - The job is waiting in the queue to be executed.
	JobStatusWaiting JobStatus = "Waiting"
)

// PossibleJobStatusValues returns the possible values for the JobStatus const type.
func PossibleJobStatusValues() []JobStatus {
	return []JobStatus{	
		JobStatusCancelled,
		JobStatusExecuting,
		JobStatusFailed,
		JobStatusSucceeded,
		JobStatusWaiting,
	}
}

// JobType - The type of the job.
type JobType string

const (
	// JobTypeOptimization - Optimization job type.
	JobTypeOptimization JobType = "Optimization"
	// JobTypeQuantumComputing - Quantum Computing job type.
	JobTypeQuantumComputing JobType = "QuantumComputing"
	// JobTypeUnknown - Unknown job type.
	JobTypeUnknown JobType = "Unknown"
)

// PossibleJobTypeValues returns the possible values for the JobType const type.
func PossibleJobTypeValues() []JobType {
	return []JobType{	
		JobTypeOptimization,
		JobTypeQuantumComputing,
		JobTypeUnknown,
	}
}

// MeterPeriod - The time period in which the quota's underlying meter is accumulated. Based on calendar year. 'None' is used
// for concurrent quotas.
type MeterPeriod string

const (
	// MeterPeriodMonthly - The meter period is per month.
	MeterPeriodMonthly MeterPeriod = "Monthly"
	// MeterPeriodNone - The meter period is instantaneous. Used for concurrent quotas.
	MeterPeriodNone MeterPeriod = "None"
)

// PossibleMeterPeriodValues returns the possible values for the MeterPeriod const type.
func PossibleMeterPeriodValues() []MeterPeriod {
	return []MeterPeriod{	
		MeterPeriodMonthly,
		MeterPeriodNone,
	}
}

// ProviderAvailability - Provider availability.
type ProviderAvailability string

const (
	// ProviderAvailabilityAvailable - Provider is available.
	ProviderAvailabilityAvailable ProviderAvailability = "Available"
	// ProviderAvailabilityDegraded - Provider is available with degraded experience.
	ProviderAvailabilityDegraded ProviderAvailability = "Degraded"
	// ProviderAvailabilityUnavailable - Provider is unavailable.
	ProviderAvailabilityUnavailable ProviderAvailability = "Unavailable"
)

// PossibleProviderAvailabilityValues returns the possible values for the ProviderAvailability const type.
func PossibleProviderAvailabilityValues() []ProviderAvailability {
	return []ProviderAvailability{	
		ProviderAvailabilityAvailable,
		ProviderAvailabilityDegraded,
		ProviderAvailabilityUnavailable,
	}
}

// SessionJobFailurePolicy - Policy controlling the behavior of the Session when a job in the session fails.
type SessionJobFailurePolicy string

const (
	// SessionJobFailurePolicyAbort - New jobs submitted after a job fails will be rejected.
	SessionJobFailurePolicyAbort SessionJobFailurePolicy = "Abort"
	// SessionJobFailurePolicyContinue - New jobs submitted after a job fails will be accepted.
	SessionJobFailurePolicyContinue SessionJobFailurePolicy = "Continue"
)

// PossibleSessionJobFailurePolicyValues returns the possible values for the SessionJobFailurePolicy const type.
func PossibleSessionJobFailurePolicyValues() []SessionJobFailurePolicy {
	return []SessionJobFailurePolicy{	
		SessionJobFailurePolicyAbort,
		SessionJobFailurePolicyContinue,
	}
}

// SessionStatus - The status of the session.
type SessionStatus string

const (
	// SessionStatusExecuting - The session is being executed.
	SessionStatusExecuting SessionStatus = "Executing"
	// SessionStatusFailed - The session completed with failure.
	SessionStatusFailed SessionStatus = "Failed"
	// SessionStatusFailureS - The session completed with some failures.
	SessionStatusFailureS SessionStatus = "Failure(s)"
	// SessionStatusSucceeded - The session completed with success.
	SessionStatusSucceeded SessionStatus = "Succeeded"
	// SessionStatusTimedOut - The session timed out.
	SessionStatusTimedOut SessionStatus = "TimedOut"
	// SessionStatusWaiting - The session is waiting in the queue to be executed.
	SessionStatusWaiting SessionStatus = "Waiting"
)

// PossibleSessionStatusValues returns the possible values for the SessionStatus const type.
func PossibleSessionStatusValues() []SessionStatus {
	return []SessionStatus{	
		SessionStatusExecuting,
		SessionStatusFailed,
		SessionStatusFailureS,
		SessionStatusSucceeded,
		SessionStatusTimedOut,
		SessionStatusWaiting,
	}
}

// TargetAvailability - Target availability.
type TargetAvailability string

const (
	// TargetAvailabilityAvailable - Target is available.
	TargetAvailabilityAvailable TargetAvailability = "Available"
	// TargetAvailabilityDegraded - Target is available with degraded experience.
	TargetAvailabilityDegraded TargetAvailability = "Degraded"
	// TargetAvailabilityUnavailable - Target is unavailable.
	TargetAvailabilityUnavailable TargetAvailability = "Unavailable"
)

// PossibleTargetAvailabilityValues returns the possible values for the TargetAvailability const type.
func PossibleTargetAvailabilityValues() []TargetAvailability {
	return []TargetAvailability{	
		TargetAvailabilityAvailable,
		TargetAvailabilityDegraded,
		TargetAvailabilityUnavailable,
	}
}

