// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Go Code Generator. DO NOT EDIT.

package armquantum

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strings"
)

// StorageClient contains the methods for the Quantum.Workspace.Services namespace.
// Don't use this type directly, use [ServicesClient.NewStorageClient] instead.
type StorageClient struct {
	internal *azcore.Client
	region string
	serviceBaseUrl string
}

// GetSasURI - Gets a URL with SAS token for a container/blob in the storage account associated with the workspace. The SAS
// URL can be used to upload job input and/or download job output.
//   - subscriptionID - The Azure subscription ID.
//   - resourceGroupName - Name of the Azure resource group.
//   - workspaceName - Name of the Azure Quantum workspace.
//   - blobDetails - The details (name and container) of the blob.
//   - options - StorageClientGetSasURIOptions contains the optional parameters for the StorageClient.GetSasURI method.
func (client *StorageClient) GetSasURI(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, blobDetails BlobDetails, options *StorageClientGetSasURIOptions) (StorageClientGetSasURIResponse, error) {
	var err error
	req, err := client.getSasURICreateRequest(ctx, subscriptionID, resourceGroupName, workspaceName, blobDetails, options)
	if err != nil {
		return StorageClientGetSasURIResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return StorageClientGetSasURIResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return StorageClientGetSasURIResponse{}, err
	}
	resp, err := client.getSasURIHandleResponse(httpResp)
	return resp, err
}

// getSasURICreateRequest creates the GetSasURI request.
func (client *StorageClient) getSasURICreateRequest(ctx context.Context, subscriptionID string, resourceGroupName string, workspaceName string, blobDetails BlobDetails, options *StorageClientGetSasURIOptions) (*policy.Request, error) {
	host := "https://{region}.{serviceBaseUrl}"
	host = strings.ReplaceAll(host, "{region}", client.region)
	host = strings.ReplaceAll(host, "{serviceBaseUrl}", client.serviceBaseUrl)
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Quantum/workspaces/{workspaceName}/storage/sasUri"
	if subscriptionID == "" {
		return nil, errors.New("parameter subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if workspaceName == "" {
		return nil, errors.New("parameter workspaceName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{workspaceName}", url.PathEscape(workspaceName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-03-01-preview")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	req.Raw().Header["Content-Type"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, blobDetails); err != nil {
	return nil, err
}
	return req, nil
}

// getSasURIHandleResponse handles the GetSasURI response.
func (client *StorageClient) getSasURIHandleResponse(resp *http.Response) (StorageClientGetSasURIResponse, error) {
	result := StorageClientGetSasURIResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.SasURIResponse); err != nil {
		return StorageClientGetSasURIResponse{}, err
	}
	return result, nil
}

